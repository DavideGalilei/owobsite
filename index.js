/* Generated by the Nim Compiler v1.6.6 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI33554456 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI671088701 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI939524408 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1140850698 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1140850697 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555165 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554440 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555164 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555112 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555113 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1056964628 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1107296396 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1107296260 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1107296259 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI419430695 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33554439 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
NTI419430695.base = NTI33554439;
NTI1107296260.base = NTI33554439;
var NNI1107296259 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "word", len: 0, typ: NTI33554439, name: "word", sons: null}, 
{kind: 1, offset: "replacedWords", len: 0, typ: NTI1107296260, name: "replacedWords", sons: null}]};
NTI1107296259.node = NNI1107296259;
NTI1107296396.base = NTI33554439;
var NNI1056964628 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1056964628.node = NNI1056964628;
var NNI33555113 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555113.node = NNI33555113;
NTI33555164.base = NTI33555112;
NTI33555165.base = NTI33555112;
var NNI33555112 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555164, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554440, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554439, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554439, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555165, name: "up", sons: null}]};
NTI33555112.node = NNI33555112;
var NNI33555083 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555083.node = NNI33555083;
NTI33555112.base = NTI33555083;
NTI33555113.base = NTI33555112;
NTI1056964628.base = NTI33555113;
NTI1140850698.base = NTI33554439;
var NNI1140850697 = {kind: 1, offset: "captures", len: 0, typ: NTI1140850698, name: "captures", sons: null};
NTI1140850697.node = NNI1140850697;
NTI939524408.base = NTI1107296259;
var NNI671088701 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554456, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554456, name: "b", sons: null}]};
NTI671088701.node = NNI671088701;

function mnewString(len_33556894) {
        return new Array(len_33556894);
  

  
}

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557141, src_33557142, ti_33557143) {
  var result_33557152 = null;

    switch (ti_33557143.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557132(ti_33557143))) {
      result_33557152 = src_33557142;
      }
      else {
        result_33557152 = [src_33557142[0], src_33557142[1]];
      }
      
      break;
    case 19:
            if (dest_33557141 === null || dest_33557141 === undefined) {
        dest_33557141 = {};
      }
      else {
        for (var key in dest_33557141) { delete dest_33557141[key]; }
      }
      for (var key in src_33557142) { dest_33557141[key] = src_33557142[key]; }
      result_33557152 = dest_33557141;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557143.base == null))) {
      result_33557152 = nimCopy(dest_33557141, src_33557142, ti_33557143.base);
      }
      else {
      if ((ti_33557143.kind == 17)) {
      result_33557152 = (dest_33557141 === null || dest_33557141 === undefined) ? {m_type: ti_33557143} : dest_33557141;
      }
      else {
        result_33557152 = (dest_33557141 === null || dest_33557141 === undefined) ? {} : dest_33557141;
      }
      }
      nimCopyAux(result_33557152, src_33557142, ti_33557143.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_33557142 === null) {
        result_33557152 = null;
      }
      else {
        if (dest_33557141 === null || dest_33557141 === undefined || dest_33557141.length != src_33557142.length) {
          dest_33557141 = new Array(src_33557142.length);
        }
        result_33557152 = dest_33557141;
        for (var i = 0; i < src_33557142.length; ++i) {
          result_33557152[i] = nimCopy(result_33557152[i], src_33557142[i], ti_33557143.base);
        }
      }
    
      break;
    case 28:
            if (src_33557142 !== null) {
        result_33557152 = src_33557142.slice(0);
      }
    
      break;
    default: 
      result_33557152 = src_33557142;
      break;
    }

  return result_33557152;

}

function makeNimstrLit(c_33556802) {
      var result = [];
  for (var i = 0; i < c_33556802.length; ++i) {
    result[i] = c_33556802.charCodeAt(i);
  }
  return result;
  

  
}
      var classes_452984836 = [makeNimstrLit("p"), makeNimstrLit("h1"), makeNimstrLit("h2"), makeNimstrLit("h3"), makeNimstrLit("h4"), makeNimstrLit("h5"), makeNimstrLit("h6"), makeNimstrLit("button"), makeNimstrLit("pre"), makeNimstrLit("code"), makeNimstrLit("li"), makeNimstrLit("span"), makeNimstrLit("nobr"), makeNimstrLit("option")];

function toJSStr(s_33556808) {
                    var Temporary5;
            var Temporary7;

  var result_33556809 = null;

    var res_33556843 = newSeq_33556826((s_33556808).length);
    var i_33556844 = 0;
    var j_33556845 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_33556844 < (s_33556808).length)) break Label2;
          var c_33556846 = s_33556808[i_33556844];
          if ((c_33556846 < 128)) {
          res_33556843[j_33556845] = String.fromCharCode(c_33556846);
          i_33556844 += 1;
          }
          else {
            var helper_33556858 = newSeq_33556826(0);
            Label3: do {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556859 = c_33556846.toString(16);
                  if ((((code_33556859) == null ? 0 : (code_33556859).length) == 1)) {
                  helper_33556858.push("%0");;
                  }
                  else {
                  helper_33556858.push("%");;
                  }
                  
                  helper_33556858.push(code_33556859);;
                  i_33556844 += 1;
                    if (((s_33556808).length <= i_33556844)) Temporary5 = true; else {                      Temporary5 = (s_33556808[i_33556844] < 128);                    }                  if (Temporary5) {
                  break Label3;
                  }
                  
                  c_33556846 = s_33556808[i_33556844];
                }
            } while (false);
++excHandler;
            Temporary7 = framePtr;
            try {
            res_33556843[j_33556845] = decodeURIComponent(helper_33556858.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            framePtr = Temporary7;
            res_33556843[j_33556845] = helper_33556858.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Temporary7;
            }
          }
          
          j_33556845 += 1;
        }
    } while (false);
    if (res_33556843.length < j_33556845) { for (var i = res_33556843.length ; i < j_33556845 ; ++i) res_33556843.push(null); }
               else { res_33556843.length = j_33556845; };
    result_33556809 = res_33556843.join("");

  return result_33556809;

}

function cstrToNimstr(c_33556805) {
      var ln = c_33556805.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_33556805.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_33556805.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
    var toLowerRanges_872416153 = new Int32Array([65, 90, 532, 192, 214, 532, 216, 222, 532, 393, 394, 705, 433, 434, 717, 904, 906, 537, 910, 911, 563, 913, 929, 532, 931, 939, 532, 1021, 1023, 370, 1024, 1039, 580, 1040, 1071, 532, 1329, 1366, 548, 4256, 4293, 7764, 5024, 5103, 39364, 5104, 5109, 508, 7312, 7354, -2508, 7357, 7359, -2508, 7944, 7951, 492, 7960, 7965, 492, 7976, 7983, 492, 7992, 7999, 492, 8008, 8013, 492, 8040, 8047, 492, 8072, 8079, 492, 8088, 8095, 492, 8104, 8111, 492, 8120, 8121, 492, 8122, 8123, 426, 8136, 8139, 414, 8152, 8153, 492, 8154, 8155, 400, 8168, 8169, 492, 8170, 8171, 388, 8184, 8185, 372, 8186, 8187, 374, 11264, 11310, 548, 11390, 11391, -10315, 65313, 65338, 532, 66560, 66599, 540, 66736, 66771, 540, 68736, 68786, 564, 71840, 71871, 532, 93760, 93791, 532, 125184, 125217, 534]);
    var toLowerSinglets_872416154 = new Int32Array([256, 501, 258, 501, 260, 501, 262, 501, 264, 501, 266, 501, 268, 501, 270, 501, 272, 501, 274, 501, 276, 501, 278, 501, 280, 501, 282, 501, 284, 501, 286, 501, 288, 501, 290, 501, 292, 501, 294, 501, 296, 501, 298, 501, 300, 501, 302, 501, 304, 301, 306, 501, 308, 501, 310, 501, 313, 501, 315, 501, 317, 501, 319, 501, 321, 501, 323, 501, 325, 501, 327, 501, 330, 501, 332, 501, 334, 501, 336, 501, 338, 501, 340, 501, 342, 501, 344, 501, 346, 501, 348, 501, 350, 501, 352, 501, 354, 501, 356, 501, 358, 501, 360, 501, 362, 501, 364, 501, 366, 501, 368, 501, 370, 501, 372, 501, 374, 501, 376, 379, 377, 501, 379, 501, 381, 501, 385, 710, 386, 501, 388, 501, 390, 706, 391, 501, 395, 501, 398, 579, 399, 702, 400, 703, 401, 501, 403, 705, 404, 707, 406, 711, 407, 709, 408, 501, 412, 711, 413, 713, 415, 714, 416, 501, 418, 501, 420, 501, 422, 718, 423, 501, 425, 718, 428, 501, 430, 718, 431, 501, 435, 501, 437, 501, 439, 719, 440, 501, 444, 501, 452, 502, 453, 501, 455, 502, 456, 501, 458, 502, 459, 501, 461, 501, 463, 501, 465, 501, 467, 501, 469, 501, 471, 501, 473, 501, 475, 501, 478, 501, 480, 501, 482, 501, 484, 501, 486, 501, 488, 501, 490, 501, 492, 501, 494, 501, 497, 502, 498, 501, 500, 501, 502, 403, 503, 444, 504, 501, 506, 501, 508, 501, 510, 501, 512, 501, 514, 501, 516, 501, 518, 501, 520, 501, 522, 501, 524, 501, 526, 501, 528, 501, 530, 501, 532, 501, 534, 501, 536, 501, 538, 501, 540, 501, 542, 501, 544, 370, 546, 501, 548, 501, 550, 501, 552, 501, 554, 501, 556, 501, 558, 501, 560, 501, 562, 501, 570, 11295, 571, 501, 573, 337, 574, 11292, 577, 501, 579, 305, 580, 569, 581, 571, 582, 501, 584, 501, 586, 501, 588, 501, 590, 501, 880, 501, 882, 501, 886, 501, 895, 616, 902, 538, 908, 564, 975, 508, 984, 501, 986, 501, 988, 501, 990, 501, 992, 501, 994, 501, 996, 501, 998, 501, 1000, 501, 1002, 501, 1004, 501, 1006, 501, 1012, 440, 1015, 501, 1017, 493, 1018, 501, 1120, 501, 1122, 501, 1124, 501, 1126, 501, 1128, 501, 1130, 501, 1132, 501, 1134, 501, 1136, 501, 1138, 501, 1140, 501, 1142, 501, 1144, 501, 1146, 501, 1148, 501, 1150, 501, 1152, 501, 1162, 501, 1164, 501, 1166, 501, 1168, 501, 1170, 501, 1172, 501, 1174, 501, 1176, 501, 1178, 501, 1180, 501, 1182, 501, 1184, 501, 1186, 501, 1188, 501, 1190, 501, 1192, 501, 1194, 501, 1196, 501, 1198, 501, 1200, 501, 1202, 501, 1204, 501, 1206, 501, 1208, 501, 1210, 501, 1212, 501, 1214, 501, 1216, 515, 1217, 501, 1219, 501, 1221, 501, 1223, 501, 1225, 501, 1227, 501, 1229, 501, 1232, 501, 1234, 501, 1236, 501, 1238, 501, 1240, 501, 1242, 501, 1244, 501, 1246, 501, 1248, 501, 1250, 501, 1252, 501, 1254, 501, 1256, 501, 1258, 501, 1260, 501, 1262, 501, 1264, 501, 1266, 501, 1268, 501, 1270, 501, 1272, 501, 1274, 501, 1276, 501, 1278, 501, 1280, 501, 1282, 501, 1284, 501, 1286, 501, 1288, 501, 1290, 501, 1292, 501, 1294, 501, 1296, 501, 1298, 501, 1300, 501, 1302, 501, 1304, 501, 1306, 501, 1308, 501, 1310, 501, 1312, 501, 1314, 501, 1316, 501, 1318, 501, 1320, 501, 1322, 501, 1324, 501, 1326, 501, 4295, 7764, 4301, 7764, 7680, 501, 7682, 501, 7684, 501, 7686, 501, 7688, 501, 7690, 501, 7692, 501, 7694, 501, 7696, 501, 7698, 501, 7700, 501, 7702, 501, 7704, 501, 7706, 501, 7708, 501, 7710, 501, 7712, 501, 7714, 501, 7716, 501, 7718, 501, 7720, 501, 7722, 501, 7724, 501, 7726, 501, 7728, 501, 7730, 501, 7732, 501, 7734, 501, 7736, 501, 7738, 501, 7740, 501, 7742, 501, 7744, 501, 7746, 501, 7748, 501, 7750, 501, 7752, 501, 7754, 501, 7756, 501, 7758, 501, 7760, 501, 7762, 501, 7764, 501, 7766, 501, 7768, 501, 7770, 501, 7772, 501, 7774, 501, 7776, 501, 7778, 501, 7780, 501, 7782, 501, 7784, 501, 7786, 501, 7788, 501, 7790, 501, 7792, 501, 7794, 501, 7796, 501, 7798, 501, 7800, 501, 7802, 501, 7804, 501, 7806, 501, 7808, 501, 7810, 501, 7812, 501, 7814, 501, 7816, 501, 7818, 501, 7820, 501, 7822, 501, 7824, 501, 7826, 501, 7828, 501, 7838, -7115, 7840, 501, 7842, 501, 7844, 501, 7846, 501, 7848, 501, 7850, 501, 7852, 501, 7854, 501, 7856, 501, 7858, 501, 7860, 501, 7862, 501, 7864, 501, 7866, 501, 7868, 501, 7870, 501, 7872, 501, 7874, 501, 7876, 501, 7878, 501, 7880, 501, 7882, 501, 7884, 501, 7886, 501, 7888, 501, 7890, 501, 7892, 501, 7894, 501, 7896, 501, 7898, 501, 7900, 501, 7902, 501, 7904, 501, 7906, 501, 7908, 501, 7910, 501, 7912, 501, 7914, 501, 7916, 501, 7918, 501, 7920, 501, 7922, 501, 7924, 501, 7926, 501, 7928, 501, 7930, 501, 7932, 501, 7934, 501, 8025, 492, 8027, 492, 8029, 492, 8031, 492, 8124, 491, 8140, 491, 8172, 493, 8188, 491, 8486, -7017, 8490, -7883, 8491, -7762, 8498, 528, 8579, 501, 11360, 501, 11362, -10243, 11363, -3314, 11364, -10227, 11367, 501, 11369, 501, 11371, 501, 11373, -10280, 11374, -10249, 11375, -10283, 11376, -10282, 11378, 501, 11381, 501, 11392, 501, 11394, 501, 11396, 501, 11398, 501, 11400, 501, 11402, 501, 11404, 501, 11406, 501, 11408, 501, 11410, 501, 11412, 501, 11414, 501, 11416, 501, 11418, 501, 11420, 501, 11422, 501, 11424, 501, 11426, 501, 11428, 501, 11430, 501, 11432, 501, 11434, 501, 11436, 501, 11438, 501, 11440, 501, 11442, 501, 11444, 501, 11446, 501, 11448, 501, 11450, 501, 11452, 501, 11454, 501, 11456, 501, 11458, 501, 11460, 501, 11462, 501, 11464, 501, 11466, 501, 11468, 501, 11470, 501, 11472, 501, 11474, 501, 11476, 501, 11478, 501, 11480, 501, 11482, 501, 11484, 501, 11486, 501, 11488, 501, 11490, 501, 11499, 501, 11501, 501, 11506, 501, 42560, 501, 42562, 501, 42564, 501, 42566, 501, 42568, 501, 42570, 501, 42572, 501, 42574, 501, 42576, 501, 42578, 501, 42580, 501, 42582, 501, 42584, 501, 42586, 501, 42588, 501, 42590, 501, 42592, 501, 42594, 501, 42596, 501, 42598, 501, 42600, 501, 42602, 501, 42604, 501, 42624, 501, 42626, 501, 42628, 501, 42630, 501, 42632, 501, 42634, 501, 42636, 501, 42638, 501, 42640, 501, 42642, 501, 42644, 501, 42646, 501, 42648, 501, 42650, 501, 42786, 501, 42788, 501, 42790, 501, 42792, 501, 42794, 501, 42796, 501, 42798, 501, 42802, 501, 42804, 501, 42806, 501, 42808, 501, 42810, 501, 42812, 501, 42814, 501, 42816, 501, 42818, 501, 42820, 501, 42822, 501, 42824, 501, 42826, 501, 42828, 501, 42830, 501, 42832, 501, 42834, 501, 42836, 501, 42838, 501, 42840, 501, 42842, 501, 42844, 501, 42846, 501, 42848, 501, 42850, 501, 42852, 501, 42854, 501, 42856, 501, 42858, 501, 42860, 501, 42862, 501, 42873, 501, 42875, 501, 42877, -34832, 42878, 501, 42880, 501, 42882, 501, 42884, 501, 42886, 501, 42891, 501, 42893, -41780, 42896, 501, 42898, 501, 42902, 501, 42904, 501, 42906, 501, 42908, 501, 42910, 501, 42912, 501, 42914, 501, 42916, 501, 42918, 501, 42920, 501, 42922, -41808, 42923, -41819, 42924, -41815, 42925, -41805, 42926, -41808, 42928, -41758, 42929, -41782, 42930, -41761, 42931, 1428, 42932, 501, 42934, 501, 42936, 501, 42938, 501, 42940, 501, 42942, 501, 42946, 501, 42948, 452, 42949, -41807, 42950, -34884]);

function eqStrings(a_33556932, b_33556933) {
        if (a_33556932 == b_33556933) return true;
    if (a_33556932 === null && b_33556933.length == 0) return true;
    if (b_33556933 === null && a_33556932.length == 0) return true;
    if ((!a_33556932) || (!b_33556933)) return false;
    var alen = a_33556932.length;
    if (alen != b_33556933.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_33556932[i] != b_33556933[i]) return false;
    return true;
  

  
}

function nimMax(a_33556999, b_33557000) {
    var Temporary1;

  var result_33557001 = 0;

  BeforeRet: do {
    if ((b_33557000 <= a_33556999)) {
    Temporary1 = a_33556999;
    }
    else {
    Temporary1 = b_33557000;
    }
    
    result_33557001 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_33557001;

}

function nimMin(a_33556995, b_33556996) {
    var Temporary1;

  var result_33556997 = 0;

  BeforeRet: do {
    if ((a_33556995 <= b_33556996)) {
    Temporary1 = a_33556995;
    }
    else {
    Temporary1 = b_33556996;
    }
    
    result_33556997 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_33556997;

}
            var SPECIFIC_WORD_MAPPING_LIST_989855746 = [mapFucToFwuc_1006633164, mapMomToMwom_1006633166, mapTimeToTim_1006633180, mapMeToMwe_1006633168, mapNVowelToNy_1006633170, mapOverToOwor_1006633182, mapOveToUv_1006633172, mapHahaToHeheXd_1006633174, mapTheToTeh_1006633176, mapYouToU_1006633178, mapReadToWead_1006633046, mapWorseToWose_1006633184];

function raiseException(e_33556668, ename_33556669) {
    e_33556668.name = ename_33556669;
    if ((excHandler == 0)) {
    unhandledException(e_33556668);
    }
    
    throw e_33556668;

  
}
    var toUpperRanges_872416155 = new Int32Array([97, 122, 468, 224, 246, 468, 248, 254, 468, 575, 576, 11315, 598, 599, 295, 650, 651, 283, 891, 893, 630, 941, 943, 463, 945, 961, 468, 963, 971, 468, 973, 974, 437, 1072, 1103, 468, 1104, 1119, 420, 1377, 1414, 452, 4304, 4346, 3508, 4349, 4351, 3508, 5112, 5117, 492, 7299, 7300, -5742, 7936, 7943, 508, 7952, 7957, 508, 7968, 7975, 508, 7984, 7991, 508, 8000, 8005, 508, 8032, 8039, 508, 8048, 8049, 574, 8050, 8053, 586, 8054, 8055, 600, 8056, 8057, 628, 8058, 8059, 612, 8060, 8061, 626, 8064, 8071, 508, 8080, 8087, 508, 8096, 8103, 508, 8112, 8113, 508, 8144, 8145, 508, 8160, 8161, 508, 11312, 11358, 452, 11520, 11557, -6764, 43888, 43967, -38364, 65345, 65370, 468, 66600, 66639, 460, 66776, 66811, 460, 68800, 68850, 436, 71872, 71903, 468, 93792, 93823, 468, 125218, 125251, 466]);
    var toUpperSinglets_872416156 = new Int32Array([181, 1243, 255, 621, 257, 499, 259, 499, 261, 499, 263, 499, 265, 499, 267, 499, 269, 499, 271, 499, 273, 499, 275, 499, 277, 499, 279, 499, 281, 499, 283, 499, 285, 499, 287, 499, 289, 499, 291, 499, 293, 499, 295, 499, 297, 499, 299, 499, 301, 499, 303, 499, 305, 268, 307, 499, 309, 499, 311, 499, 314, 499, 316, 499, 318, 499, 320, 499, 322, 499, 324, 499, 326, 499, 328, 499, 331, 499, 333, 499, 335, 499, 337, 499, 339, 499, 341, 499, 343, 499, 345, 499, 347, 499, 349, 499, 351, 499, 353, 499, 355, 499, 357, 499, 359, 499, 361, 499, 363, 499, 365, 499, 367, 499, 369, 499, 371, 499, 373, 499, 375, 499, 378, 499, 380, 499, 382, 499, 383, 200, 384, 695, 387, 499, 389, 499, 392, 499, 396, 499, 402, 499, 405, 597, 409, 499, 410, 663, 414, 630, 417, 499, 419, 499, 421, 499, 424, 499, 429, 499, 432, 499, 436, 499, 438, 499, 441, 499, 445, 499, 447, 556, 453, 499, 454, 498, 456, 499, 457, 498, 459, 499, 460, 498, 462, 499, 464, 499, 466, 499, 468, 499, 470, 499, 472, 499, 474, 499, 476, 499, 477, 421, 479, 499, 481, 499, 483, 499, 485, 499, 487, 499, 489, 499, 491, 499, 493, 499, 495, 499, 498, 499, 499, 498, 501, 499, 505, 499, 507, 499, 509, 499, 511, 499, 513, 499, 515, 499, 517, 499, 519, 499, 521, 499, 523, 499, 525, 499, 527, 499, 529, 499, 531, 499, 533, 499, 535, 499, 537, 499, 539, 499, 541, 499, 543, 499, 547, 499, 549, 499, 551, 499, 553, 499, 555, 499, 557, 499, 559, 499, 561, 499, 563, 499, 572, 499, 578, 499, 583, 499, 585, 499, 587, 499, 589, 499, 591, 499, 592, 11283, 593, 11280, 594, 11282, 595, 290, 596, 294, 601, 298, 603, 297, 604, 42819, 608, 295, 609, 42815, 611, 293, 613, 42780, 614, 42808, 616, 291, 617, 289, 618, 42808, 619, 11243, 620, 42805, 623, 289, 625, 11249, 626, 287, 629, 286, 637, 11227, 640, 282, 642, 42807, 643, 282, 647, 42782, 648, 282, 649, 431, 652, 429, 658, 281, 669, 42761, 670, 42758, 881, 499, 883, 499, 887, 499, 940, 462, 962, 469, 972, 436, 976, 438, 977, 443, 981, 453, 982, 446, 983, 492, 985, 499, 987, 499, 989, 499, 991, 499, 993, 499, 995, 499, 997, 499, 999, 499, 1001, 499, 1003, 499, 1005, 499, 1007, 499, 1008, 414, 1009, 420, 1010, 507, 1011, 384, 1013, 404, 1016, 499, 1019, 499, 1121, 499, 1123, 499, 1125, 499, 1127, 499, 1129, 499, 1131, 499, 1133, 499, 1135, 499, 1137, 499, 1139, 499, 1141, 499, 1143, 499, 1145, 499, 1147, 499, 1149, 499, 1151, 499, 1153, 499, 1163, 499, 1165, 499, 1167, 499, 1169, 499, 1171, 499, 1173, 499, 1175, 499, 1177, 499, 1179, 499, 1181, 499, 1183, 499, 1185, 499, 1187, 499, 1189, 499, 1191, 499, 1193, 499, 1195, 499, 1197, 499, 1199, 499, 1201, 499, 1203, 499, 1205, 499, 1207, 499, 1209, 499, 1211, 499, 1213, 499, 1215, 499, 1218, 499, 1220, 499, 1222, 499, 1224, 499, 1226, 499, 1228, 499, 1230, 499, 1231, 485, 1233, 499, 1235, 499, 1237, 499, 1239, 499, 1241, 499, 1243, 499, 1245, 499, 1247, 499, 1249, 499, 1251, 499, 1253, 499, 1255, 499, 1257, 499, 1259, 499, 1261, 499, 1263, 499, 1265, 499, 1267, 499, 1269, 499, 1271, 499, 1273, 499, 1275, 499, 1277, 499, 1279, 499, 1281, 499, 1283, 499, 1285, 499, 1287, 499, 1289, 499, 1291, 499, 1293, 499, 1295, 499, 1297, 499, 1299, 499, 1301, 499, 1303, 499, 1305, 499, 1307, 499, 1309, 499, 1311, 499, 1313, 499, 1315, 499, 1317, 499, 1319, 499, 1321, 499, 1323, 499, 1325, 499, 1327, 499, 7296, -5754, 7297, -5753, 7298, -5744, 7301, -5743, 7302, -5736, 7303, -5681, 7304, 35766, 7545, 35832, 7549, 4314, 7566, 35884, 7681, 499, 7683, 499, 7685, 499, 7687, 499, 7689, 499, 7691, 499, 7693, 499, 7695, 499, 7697, 499, 7699, 499, 7701, 499, 7703, 499, 7705, 499, 7707, 499, 7709, 499, 7711, 499, 7713, 499, 7715, 499, 7717, 499, 7719, 499, 7721, 499, 7723, 499, 7725, 499, 7727, 499, 7729, 499, 7731, 499, 7733, 499, 7735, 499, 7737, 499, 7739, 499, 7741, 499, 7743, 499, 7745, 499, 7747, 499, 7749, 499, 7751, 499, 7753, 499, 7755, 499, 7757, 499, 7759, 499, 7761, 499, 7763, 499, 7765, 499, 7767, 499, 7769, 499, 7771, 499, 7773, 499, 7775, 499, 7777, 499, 7779, 499, 7781, 499, 7783, 499, 7785, 499, 7787, 499, 7789, 499, 7791, 499, 7793, 499, 7795, 499, 7797, 499, 7799, 499, 7801, 499, 7803, 499, 7805, 499, 7807, 499, 7809, 499, 7811, 499, 7813, 499, 7815, 499, 7817, 499, 7819, 499, 7821, 499, 7823, 499, 7825, 499, 7827, 499, 7829, 499, 7835, 441, 7841, 499, 7843, 499, 7845, 499, 7847, 499, 7849, 499, 7851, 499, 7853, 499, 7855, 499, 7857, 499, 7859, 499, 7861, 499, 7863, 499, 7865, 499, 7867, 499, 7869, 499, 7871, 499, 7873, 499, 7875, 499, 7877, 499, 7879, 499, 7881, 499, 7883, 499, 7885, 499, 7887, 499, 7889, 499, 7891, 499, 7893, 499, 7895, 499, 7897, 499, 7899, 499, 7901, 499, 7903, 499, 7905, 499, 7907, 499, 7909, 499, 7911, 499, 7913, 499, 7915, 499, 7917, 499, 7919, 499, 7921, 499, 7923, 499, 7925, 499, 7927, 499, 7929, 499, 7931, 499, 7933, 499, 7935, 499, 8017, 508, 8019, 508, 8021, 508, 8023, 508, 8115, 509, 8126, -6705, 8131, 509, 8165, 507, 8179, 509, 8526, 472, 8580, 499, 11361, 499, 11365, -10295, 11366, -10292, 11368, 499, 11370, 499, 11372, 499, 11379, 499, 11382, 499, 11393, 499, 11395, 499, 11397, 499, 11399, 499, 11401, 499, 11403, 499, 11405, 499, 11407, 499, 11409, 499, 11411, 499, 11413, 499, 11415, 499, 11417, 499, 11419, 499, 11421, 499, 11423, 499, 11425, 499, 11427, 499, 11429, 499, 11431, 499, 11433, 499, 11435, 499, 11437, 499, 11439, 499, 11441, 499, 11443, 499, 11445, 499, 11447, 499, 11449, 499, 11451, 499, 11453, 499, 11455, 499, 11457, 499, 11459, 499, 11461, 499, 11463, 499, 11465, 499, 11467, 499, 11469, 499, 11471, 499, 11473, 499, 11475, 499, 11477, 499, 11479, 499, 11481, 499, 11483, 499, 11485, 499, 11487, 499, 11489, 499, 11491, 499, 11500, 499, 11502, 499, 11507, 499, 11559, -6764, 11565, -6764, 42561, 499, 42563, 499, 42565, 499, 42567, 499, 42569, 499, 42571, 499, 42573, 499, 42575, 499, 42577, 499, 42579, 499, 42581, 499, 42583, 499, 42585, 499, 42587, 499, 42589, 499, 42591, 499, 42593, 499, 42595, 499, 42597, 499, 42599, 499, 42601, 499, 42603, 499, 42605, 499, 42625, 499, 42627, 499, 42629, 499, 42631, 499, 42633, 499, 42635, 499, 42637, 499, 42639, 499, 42641, 499, 42643, 499, 42645, 499, 42647, 499, 42649, 499, 42651, 499, 42787, 499, 42789, 499, 42791, 499, 42793, 499, 42795, 499, 42797, 499, 42799, 499, 42803, 499, 42805, 499, 42807, 499, 42809, 499, 42811, 499, 42813, 499, 42815, 499, 42817, 499, 42819, 499, 42821, 499, 42823, 499, 42825, 499, 42827, 499, 42829, 499, 42831, 499, 42833, 499, 42835, 499, 42837, 499, 42839, 499, 42841, 499, 42843, 499, 42845, 499, 42847, 499, 42849, 499, 42851, 499, 42853, 499, 42855, 499, 42857, 499, 42859, 499, 42861, 499, 42863, 499, 42874, 499, 42876, 499, 42879, 499, 42881, 499, 42883, 499, 42885, 499, 42887, 499, 42892, 499, 42897, 499, 42899, 499, 42900, 548, 42903, 499, 42905, 499, 42907, 499, 42909, 499, 42911, 499, 42913, 499, 42915, 499, 42917, 499, 42919, 499, 42921, 499, 42933, 499, 42935, 499, 42937, 499, 42939, 499, 42941, 499, 42943, 499, 42947, 499, 43859, -428]);
              var OWO_MAPPING_LIST_989855749 = [mapLlToWw_1006633112, mapVowelOrRExceptOLToWl_1006633114, mapOldToOwld_1006633116, mapOlToOwl_1006633118, mapLOrROToWo_1006633120, mapSpecificConsonantsOToLetterAndWo_1006633122, mapVOrWLeToWal_1006633146, mapFiToFwi_1006633148, mapVerToWer_1006633150, mapPoiToPwoi_1006633152, mapSpecificConsonantsLeToLetterAndWal_1006633154, mapConsonantRToConsonantW_1006633156, mapLyToWy_1006633158, mapPleToPwe_1006633160, mapNrToNw_1006633162];
        var FACES_1006633026 = [makeNimstrLit("(\xE3\x83\xBB`\xCF\x89\xC2\xB4\xE3\x83\xBB)"), makeNimstrLit(";;w;;"), makeNimstrLit("owo"), makeNimstrLit("UwU"), makeNimstrLit(">w<"), makeNimstrLit("^w^"), makeNimstrLit("(* ^ \xCF\x89 ^)"), makeNimstrLit("(\xE2\x8C\x92\xCF\x89\xE2\x8C\x92)"), makeNimstrLit("\xE3\x83\xBD(*\xE3\x83\xBB\xCF\x89\xE3\x83\xBB)\xEF\xBE\x89"), makeNimstrLit("(o\xC2\xB4\xE2\x88\x80`o)"), makeNimstrLit("(o\xEF\xBD\xA5\xCF\x89\xEF\xBD\xA5o)"), makeNimstrLit("\xEF\xBC\xBC(\xEF\xBC\xBE\xE2\x96\xBD\xEF\xBC\xBE)\xEF\xBC\x8F"), makeNimstrLit("(*^\xCF\x89^)"), makeNimstrLit("(\xE2\x97\x95\xE2\x80\xBF\xE2\x97\x95\xE2\x9C\xBF)"), makeNimstrLit("(\xE2\x97\x95\xE1\xB4\xA5\xE2\x97\x95)"), makeNimstrLit("\xCA\x95\xE2\x80\xA2\xE1\xB4\xA5\xE2\x80\xA2\xCA\x94"), makeNimstrLit("\xCA\x95\xEF\xBF\xAB\xE1\xB4\xA5\xEF\xBF\xA9\xCA\x94"), makeNimstrLit("(*^.^*)"), makeNimstrLit("(\xEF\xBD\xA1\xE2\x99\xA5\xE2\x80\xBF\xE2\x99\xA5\xEF\xBD\xA1)"), makeNimstrLit("OwO"), makeNimstrLit("uwu"), makeNimstrLit("uvu"), makeNimstrLit("UvU"), makeNimstrLit("(*\xEF\xBF\xA3\xD0\xB7\xEF\xBF\xA3)"), makeNimstrLit("(\xE3\x81\xA4\xE2\x9C\xA7\xCF\x89\xE2\x9C\xA7)\xE3\x81\xA4"), makeNimstrLit("(/ =\xCF\x89=)/"), makeNimstrLit("(\xE2\x95\xAF\xC2\xB0\xE2\x96\xA1\xC2\xB0\xEF\xBC\x89\xE2\x95\xAF\xEF\xB8\xB5 \xE2\x94\xBB\xE2\x94\x81\xE2\x94\xBB"), makeNimstrLit("\xE2\x94\xAC\xE2\x94\x80\xE2\x94\xAC \xE3\x83\x8E( \xE3\x82\x9C-\xE3\x82\x9C\xE3\x83\x8E)"), makeNimstrLit("\xC2\xAF\\_(\xE3\x83\x84)_/\xC2\xAF")];
              var UWU_MAPPING_LIST_989855748 = [mapBracketsToStarTrails_1006633048, mapPeriodCommaExclamationSemicolonToKaomojis_1006633050, mapThatToDat_1006633100, mapThToF_1006633102, mapLeToWal_1006633104, mapVeToWe_1006633106, mapRyToWwy_1006633108, mapROrLToW_1006633110];
              var UVU_MAPPING_LIST_989855747 = [mapOToOwO_1006633036, mapEwToUwU_1006633038, mapHeyToHay_1006633040, mapDeadToDed_1006633042, mapNVowelTToNd_1006633044];
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var state_1023410189 = [{a0: 1773455756, a1: 4275166512}];
if (globalThis.utcInstance_1040188778 === undefined) {
  globalThis.utcInstance_1040188778 = [null];
}
if (globalThis.localInstance_1040188779 === undefined) {
  globalThis.localInstance_1040188779 = [null];
}
var O_TO_OWO_1006632966 = new RegExp("o", "ig");
var EW_TO_UWU_1006632967 = new RegExp("ew", "ig");
var HEY_TO_HAY_1006632968 = new RegExp("([Hh])ey", "ig");
var DEAD_TO_DED_UPPER_1006632969 = new RegExp("Dead", "ig");
var DEAD_TO_DED_LOWER_1006632970 = new RegExp("dead", "ig");
var N_VOWEL_T_TO_ND_1006632971 = new RegExp("n[aeiou]*t", "ig");
var READ_TO_WEAD_UPPER_1006632972 = new RegExp("Read", "ig");
var READ_TO_WEAD_LOWER_1006632973 = new RegExp("read", "ig");
var BRACKETS_TO_STARTRAILS_FORE_1006632974 = new RegExp("[({<]", "ig");
var BRACKETS_TO_STARTRAILS_REAR_1006632975 = new RegExp("[)}>]", "ig");
var PERIOD_COMMA_EXCLAMATION_SEMICOLON_TO_KAOMOJIS_FIRST_1006632976 = new RegExp("[.,](?![0-9])", "ig");
var PERIOD_COMMA_EXCLAMATION_SEMICOLON_TO_KAOMOJIS_SECOND_1006632977 = new RegExp("[!;]+", "ig");
var THAT_TO_DAT_UPPER_1006632978 = new RegExp("That", "ig");
var THAT_TO_DAT_LOWER_1006632979 = new RegExp("that", "ig");
var TH_TO_F_UPPER_1006632980 = new RegExp("TH(?!E)", "ig");
var TH_TO_F_LOWER_1006632981 = new RegExp("[Tt]h(?![Ee])", "ig");
var LE_TO_WAL_1006632982 = new RegExp("le$", "ig");
var VE_TO_WE_UPPER_1006632983 = new RegExp("Ve", "ig");
var VE_TO_WE_LOWER_1006632984 = new RegExp("ve", "ig");
var RY_TO_WWY_1006632985 = new RegExp("ry", "ig");
var RORL_TO_W_UPPER_1006632986 = new RegExp("(?:R|L)", "ig");
var RORL_TO_W_LOWER_1006632987 = new RegExp("(?:r|l)", "ig");
var LL_TO_WW_1006632988 = new RegExp("ll", "ig");
var VOWEL_OR_R_EXCEPT_O_L_TO_WL_UPPER_1006632989 = new RegExp("[AEIUR]([lL])$", "ig");
var VOWEL_OR_R_EXCEPT_O_L_TO_WL_LOWER_1006632990 = new RegExp("[aeiur]l$", "ig");
var OLD_TO_OWLD_UPPER_1006632991 = new RegExp("OLD", "ig");
var OLD_TO_OWLD_LOWER_1006632992 = new RegExp("([Oo])ld", "ig");
var OL_TO_OWL_UPPER_1006632993 = new RegExp("OL", "ig");
var OL_TO_OWL_LOWER_1006632994 = new RegExp("([Oo])l", "ig");
var LORR_O_TO_WO_UPPER_1006632995 = new RegExp("[LR]([oO])", "ig");
var LORR_O_TO_WO_LOWER_1006632996 = new RegExp("[lr]o", "ig");
var SPECIFIC_CONSONANTS_O_TO_LETTER_AND_WO_UPPER_1006632997 = new RegExp("([BCDFGHJKMNPQSTXYZ])([oO])", "ig");
var SPECIFIC_CONSONANTS_O_TO_LETTER_AND_WO_LOWER_1006632998 = new RegExp("([bcdfghjkmnpqstxyz])o", "ig");
var VORW_LE_TO_WAL_1006632999 = new RegExp("[vw]le", "ig");
var FI_TO_FWI_UPPER_1006633000 = new RegExp("FI", "ig");
var FI_TO_FWI_LOWER_1006633001 = new RegExp("([Ff])i", "ig");
var VER_TO_WER_1006633002 = new RegExp("([Vv])er", "ig");
var POI_TO_PWOI_1006633003 = new RegExp("([Pp])oi", "ig");
var SPECIFIC_CONSONANTS_LE_TO_LETTER_AND_WAL_1006633004 = new RegExp("([DdFfGgHhJjPpQqRrSsTtXxYyZz])le$", "ig");
var CONSONANT_R_TO_CONSONANT_W_1006633005 = new RegExp("([BbCcDdFfGgKkPpQqSsTtWwXxZz])r", "ig");
var LY_TO_WY_UPPER_1006633006 = new RegExp("Ly", "ig");
var LY_TO_WY_LOWER_1006633007 = new RegExp("ly", "ig");
var PLE_TO_PWE_1006633008 = new RegExp("([Pp])le", "ig");
var NR_TO_NW_UPPER_1006633009 = new RegExp("NR", "ig");
var NR_TO_NW_LOWER_1006633010 = new RegExp("nr", "ig");
var FUC_TO_FWUC_1006633011 = new RegExp("([Ff])uc", "ig");
var MOM_TO_MWOM_1006633012 = new RegExp("([Mm])om", "ig");
var ME_TO_MWE_1006633013 = new RegExp("([Mm])e", "ig");
var N_VOWEL_TO_NY_FIRST_1006633014 = new RegExp("n([aeiou])", "ig");
var N_VOWEL_TO_NY_SECOND_1006633015 = new RegExp("N([aeiou])", "ig");
var N_VOWEL_TO_NY_THIRD_1006633016 = new RegExp("N([AEIOU])", "ig");
var OVE_TO_UV_UPPER_1006633017 = new RegExp("OVE", "ig");
var OVE_TO_UV_LOWER_1006633018 = new RegExp("ove", "ig");
var HAHA_TO_HEHE_XD_1006633019 = new RegExp("\\b(ha|hah|heh|hehe)+\\b", "ig");
var THE_TO_TEH_1006633020 = new RegExp("\\b([Tt])he\\b", "ig");
var YOU_TO_U_UPPER_1006633021 = new RegExp("\\bYou\\b", "ig");
var YOU_TO_U_LOWER_1006633022 = new RegExp("\\byou\\b", "ig");
var TIME_TO_TIM_1006633023 = new RegExp("\\b([Tt])ime\\b", "ig");
var OVER_TO_OWOR_1006633024 = new RegExp("([Oo])ver", "ig");
var WORSE_TO_WOSE_1006633025 = new RegExp("([Ww])orse", "ig");
var WORD_REGEX_939524104 = new RegExp("[^\\s]+", "ig");
var SPACE_REGEX_939524105 = new RegExp("\\s+", "ig");

function isFatPointer_33557132(ti_33557133) {
  var result_33557134 = false;

  BeforeRet: do {
    result_33557134 = !((ConstSet1[ti_33557133.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_33557134;

}

function nimCopyAux(dest_33557145, src_33557146, n_33557147) {
    switch (n_33557147.kind) {
    case 0:
      break;
    case 1:
            dest_33557145[n_33557147.offset] = nimCopy(dest_33557145[n_33557147.offset], src_33557146[n_33557147.offset], n_33557147.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557147.sons.length; i++) {
      nimCopyAux(dest_33557145, src_33557146, n_33557147.sons[i]);
    }
    
      break;
    case 3:
            dest_33557145[n_33557147.offset] = nimCopy(dest_33557145[n_33557147.offset], src_33557146[n_33557147.offset], n_33557147.typ);
      for (var i = 0; i < n_33557147.sons.length; ++i) {
        nimCopyAux(dest_33557145, src_33557146, n_33557147.sons[i][1]);
      }
    
      break;
    }

  
}

function nsuJoinSep(a_620758356, sep_620758357) {
  var result_620758358 = [];

    if ((0 < (a_620758356).length)) {
    var L_620758365 = ((sep_620758357).length * ((a_620758356).length - 1));
    Label1: do {
      var i_620758373 = 0;
      var colontmp__452984924 = 0;
      colontmp__452984924 = (a_620758356).length - 1;
      var res_452984925 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_452984925 <= colontmp__452984924)) break Label3;
            i_620758373 = res_452984925;
            L_620758365 += (a_620758356[i_620758373]).length;
            res_452984925 += 1;
          }
      } while (false);
    } while (false);
    result_620758358 = nimCopy(null, mnewString(0), NTI33554439);
    result_620758358.push.apply(result_620758358, a_620758356[0]);;
    Label4: do {
      var i_620758385 = 0;
      var colontmp__452984928 = 0;
      colontmp__452984928 = (a_620758356).length - 1;
      var res_452984929 = 1;
      Label5: do {
          Label6: while (true) {
          if (!(res_452984929 <= colontmp__452984928)) break Label6;
            i_620758385 = res_452984929;
            result_620758358.push.apply(result_620758358, sep_620758357);;
            result_620758358.push.apply(result_620758358, a_620758356[i_620758385]);;
            res_452984929 += 1;
          }
      } while (false);
    } while (false);
    }
    else {
      result_620758358 = nimCopy(null, [], NTI33554439);
    }
    

  return result_620758358;

}

function newSeq_33556826(len_33556828) {
  var result_33556829 = [];

    result_33556829 = new Array(len_33556828); for (var i = 0 ; i < len_33556828 ; ++i) { result_33556829[i] = null; }
  return result_33556829;

}

function newSeq_419430869(len_419430871) {
  var result_419430872 = [];

    result_419430872 = new Array(len_419430871); for (var i = 0 ; i < len_419430871 ; ++i) { result_419430872[i] = []; }
  return result_419430872;

}

function map_939524192(s_939524195, op_939524197) {
  var result_939524198 = [];

    result_939524198 = new Array((s_939524195).length); for (var i = 0 ; i < (s_939524195).length ; ++i) { result_939524198[i] = ({word: [], replacedWords: []}); }    Label1: do {
      var i_939524213 = 0;
      var colontmp__452984970 = 0;
      colontmp__452984970 = (s_939524195).length;
      var i_452984971 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_452984971 < colontmp__452984970)) break Label3;
            i_939524213 = i_452984971;
            result_939524198[i_939524213] = nimCopy(result_939524198[i_939524213], op_939524197(s_939524195[i_939524213]), NTI1107296259);
            i_452984971 += 1;
          }
      } while (false);
    } while (false);

  return result_939524198;

}

function initWord_1107296265(word_1107296266) {
  var result_1107296267 = ({word: [], replacedWords: []});

    result_1107296267 = nimCopy(result_1107296267, {word: nimCopy(null, word_1107296266, NTI33554439), replacedWords: []}, NTI1107296259);

  return result_1107296267;

}

function binarySearch_872416243(c_872416244, tab_872416245, len_872416246, stride_872416247) {
      var Temporary3;

  var result_872416248 = 0;

  BeforeRet: do {
    var n_872416249 = len_872416246;
    var t_872416250 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(1 < n_872416249)) break Label2;
          var m_872416251 = Math.trunc(n_872416249 / 2);
          var p_872416252 = (t_872416250 + (m_872416251 * stride_872416247));
          if ((tab_872416245[p_872416252] <= ((c_872416244) | 0))) {
          t_872416250 = p_872416252;
          n_872416249 = (n_872416249 - m_872416251);
          }
          else {
            n_872416249 = m_872416251;
          }
          
        }
    } while (false);
      if (!!((n_872416249 == 0))) Temporary3 = false; else {        Temporary3 = (tab_872416245[t_872416250] <= ((c_872416244) | 0));      }    if (Temporary3) {
    result_872416248 = t_872416250;
    break BeforeRet;
    }
    
    result_872416248 = -1;
    break BeforeRet;
  } while (false);

  return result_872416248;

}

function nuctoLower(c_872416254) {
      var Temporary1;
      var Temporary2;
      var Temporary3;

  var result_872416255 = 0;

  BeforeRet: do {
    var c_872416256 = c_872416254;
    var p_872416265 = binarySearch_872416243(c_872416256, toLowerRanges_872416153, 45, 3);
      if (!(0 <= p_872416265)) Temporary2 = false; else {        Temporary2 = (toLowerRanges_872416153[p_872416265] <= ((c_872416256) | 0));      }      if (!Temporary2) Temporary1 = false; else {        Temporary1 = (((c_872416256) | 0) <= toLowerRanges_872416153[(p_872416265 + 1)]);      }    if (Temporary1) {
    result_872416255 = ((((((c_872416256) | 0) + toLowerRanges_872416153[(p_872416265 + 2)]) - 500)) | 0);
    break BeforeRet;
    }
    
    p_872416265 = binarySearch_872416243(c_872416256, toLowerSinglets_872416154, 610, 2);
      if (!(0 <= p_872416265)) Temporary3 = false; else {        Temporary3 = (((c_872416256) | 0) == toLowerSinglets_872416154[p_872416265]);      }    if (Temporary3) {
    result_872416255 = ((((((c_872416256) | 0) + toLowerSinglets_872416154[(p_872416265 + 1)]) - 500)) | 0);
    break BeforeRet;
    }
    
    result_872416255 = c_872416256;
    break BeforeRet;
  } while (false);

  return result_872416255;

}

function HEX3CHEX3DHEX25_33555429(x_33555430, y_33555431) {
  var result_33555432 = false;

    result_33555432 = ((x_33555430 >>> 0) <= (y_33555431 >>> 0));

  return result_33555432;

}

function nuctoLowerStr(s_872417264) {
  var result_872417265 = [];

    result_872417265 = nimCopy(null, mnewString((s_872417264).length), NTI33554439);
    var iHEX60gensym394_872417269 = 0;
    var resultIndexHEX60gensym394_872417270 = 0;
    var runeHEX60gensym394_872417271 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(iHEX60gensym394_872417269 < (s_872417264).length)) break Label2;
          if ((s_872417264[iHEX60gensym394_872417269] <= 127)) {
          runeHEX60gensym394_872417271 = s_872417264[iHEX60gensym394_872417269];
          iHEX60gensym394_872417269 += 1;
          }
          else {
          if (((s_872417264[iHEX60gensym394_872417269] >>> 5) == 6)) {
          if ((iHEX60gensym394_872417269 <= ((s_872417264).length - 2))) {
          runeHEX60gensym394_872417271 = (((s_872417264[iHEX60gensym394_872417269] & 31) << 6) | (s_872417264[(iHEX60gensym394_872417269 + 1)] & 63));
          iHEX60gensym394_872417269 += 2;
          }
          else {
            runeHEX60gensym394_872417271 = 65533;
            iHEX60gensym394_872417269 += 1;
          }
          
          }
          else {
          if (((s_872417264[iHEX60gensym394_872417269] >>> 4) == 14)) {
          if ((iHEX60gensym394_872417269 <= ((s_872417264).length - 3))) {
          runeHEX60gensym394_872417271 = ((((s_872417264[iHEX60gensym394_872417269] & 15) << 12) | ((s_872417264[(iHEX60gensym394_872417269 + 1)] & 63) << 6)) | (s_872417264[(iHEX60gensym394_872417269 + 2)] & 63));
          iHEX60gensym394_872417269 += 3;
          }
          else {
            runeHEX60gensym394_872417271 = 65533;
            iHEX60gensym394_872417269 += 1;
          }
          
          }
          else {
          if (((s_872417264[iHEX60gensym394_872417269] >>> 3) == 30)) {
          if ((iHEX60gensym394_872417269 <= ((s_872417264).length - 4))) {
          runeHEX60gensym394_872417271 = (((((s_872417264[iHEX60gensym394_872417269] & 7) << 18) | ((s_872417264[(iHEX60gensym394_872417269 + 1)] & 63) << 12)) | ((s_872417264[(iHEX60gensym394_872417269 + 2)] & 63) << 6)) | (s_872417264[(iHEX60gensym394_872417269 + 3)] & 63));
          iHEX60gensym394_872417269 += 4;
          }
          else {
            runeHEX60gensym394_872417271 = 65533;
            iHEX60gensym394_872417269 += 1;
          }
          
          }
          else {
          if (((s_872417264[iHEX60gensym394_872417269] >>> 2) == 62)) {
          if ((iHEX60gensym394_872417269 <= ((s_872417264).length - 5))) {
          runeHEX60gensym394_872417271 = ((((((s_872417264[iHEX60gensym394_872417269] & 3) << 24) | ((s_872417264[(iHEX60gensym394_872417269 + 1)] & 63) << 18)) | ((s_872417264[(iHEX60gensym394_872417269 + 2)] & 63) << 12)) | ((s_872417264[(iHEX60gensym394_872417269 + 3)] & 63) << 6)) | (s_872417264[(iHEX60gensym394_872417269 + 4)] & 63));
          iHEX60gensym394_872417269 += 5;
          }
          else {
            runeHEX60gensym394_872417271 = 65533;
            iHEX60gensym394_872417269 += 1;
          }
          
          }
          else {
          if (((s_872417264[iHEX60gensym394_872417269] >>> 1) == 126)) {
          if ((iHEX60gensym394_872417269 <= ((s_872417264).length - 6))) {
          runeHEX60gensym394_872417271 = (((((((s_872417264[iHEX60gensym394_872417269] & 1) << 30) | ((s_872417264[(iHEX60gensym394_872417269 + 1)] & 63) << 24)) | ((s_872417264[(iHEX60gensym394_872417269 + 2)] & 63) << 18)) | ((s_872417264[(iHEX60gensym394_872417269 + 3)] & 63) << 12)) | ((s_872417264[(iHEX60gensym394_872417269 + 4)] & 63) << 6)) | (s_872417264[(iHEX60gensym394_872417269 + 5)] & 63));
          iHEX60gensym394_872417269 += 6;
          }
          else {
            runeHEX60gensym394_872417271 = 65533;
            iHEX60gensym394_872417269 += 1;
          }
          
          }
          else {
            runeHEX60gensym394_872417271 = s_872417264[iHEX60gensym394_872417269];
            iHEX60gensym394_872417269 += 1;
          }
          }}}}}
          runeHEX60gensym394_872417271 = nuctoLower(runeHEX60gensym394_872417271);
          var iHEX60gensym444_872417481 = runeHEX60gensym394_872417271;
          if (HEX3CHEX3DHEX25_33555429(iHEX60gensym444_872417481, 127)) {
          (result_872417265.length = (resultIndexHEX60gensym394_872417270 + 1));
          result_872417265[(resultIndexHEX60gensym394_872417270 + 0)] = iHEX60gensym444_872417481;
          resultIndexHEX60gensym394_872417270 += 1;
          }
          else {
          if (HEX3CHEX3DHEX25_33555429(iHEX60gensym444_872417481, 2047)) {
          (result_872417265.length = (resultIndexHEX60gensym394_872417270 + 2));
          result_872417265[(resultIndexHEX60gensym394_872417270 + 0)] = ((iHEX60gensym444_872417481 >> 6) | 192);
          result_872417265[(resultIndexHEX60gensym394_872417270 + 1)] = ((iHEX60gensym444_872417481 & 63) | 128);
          resultIndexHEX60gensym394_872417270 += 2;
          }
          else {
          if (HEX3CHEX3DHEX25_33555429(iHEX60gensym444_872417481, 65535)) {
          (result_872417265.length = (resultIndexHEX60gensym394_872417270 + 3));
          result_872417265[(resultIndexHEX60gensym394_872417270 + 0)] = ((iHEX60gensym444_872417481 >> 12) | 224);
          result_872417265[(resultIndexHEX60gensym394_872417270 + 1)] = (((iHEX60gensym444_872417481 >> 6) & 63) | 128);
          result_872417265[(resultIndexHEX60gensym394_872417270 + 2)] = ((iHEX60gensym444_872417481 & 63) | 128);
          resultIndexHEX60gensym394_872417270 += 3;
          }
          else {
          if (HEX3CHEX3DHEX25_33555429(iHEX60gensym444_872417481, 2097151)) {
          (result_872417265.length = (resultIndexHEX60gensym394_872417270 + 4));
          result_872417265[(resultIndexHEX60gensym394_872417270 + 0)] = ((iHEX60gensym444_872417481 >> 18) | 240);
          result_872417265[(resultIndexHEX60gensym394_872417270 + 1)] = (((iHEX60gensym444_872417481 >> 12) & 63) | 128);
          result_872417265[(resultIndexHEX60gensym394_872417270 + 2)] = (((iHEX60gensym444_872417481 >> 6) & 63) | 128);
          result_872417265[(resultIndexHEX60gensym394_872417270 + 3)] = ((iHEX60gensym444_872417481 & 63) | 128);
          resultIndexHEX60gensym394_872417270 += 4;
          }
          else {
          if (HEX3CHEX3DHEX25_33555429(iHEX60gensym444_872417481, 67108863)) {
          (result_872417265.length = (resultIndexHEX60gensym394_872417270 + 5));
          result_872417265[(resultIndexHEX60gensym394_872417270 + 0)] = ((iHEX60gensym444_872417481 >> 24) | 248);
          result_872417265[(resultIndexHEX60gensym394_872417270 + 1)] = (((iHEX60gensym444_872417481 >> 18) & 63) | 128);
          result_872417265[(resultIndexHEX60gensym394_872417270 + 2)] = (((iHEX60gensym444_872417481 >> 12) & 63) | 128);
          result_872417265[(resultIndexHEX60gensym394_872417270 + 3)] = (((iHEX60gensym444_872417481 >> 6) & 63) | 128);
          result_872417265[(resultIndexHEX60gensym394_872417270 + 4)] = ((iHEX60gensym444_872417481 & 63) | 128);
          resultIndexHEX60gensym394_872417270 += 5;
          }
          else {
          if (HEX3CHEX3DHEX25_33555429(iHEX60gensym444_872417481, 2147483647)) {
          (result_872417265.length = (resultIndexHEX60gensym394_872417270 + 6));
          result_872417265[(resultIndexHEX60gensym394_872417270 + 0)] = ((iHEX60gensym444_872417481 >> 30) | 252);
          result_872417265[(resultIndexHEX60gensym394_872417270 + 1)] = (((iHEX60gensym444_872417481 >> 24) & 63) | 128);
          result_872417265[(resultIndexHEX60gensym394_872417270 + 2)] = (((iHEX60gensym444_872417481 >> 18) & 63) | 128);
          result_872417265[(resultIndexHEX60gensym394_872417270 + 3)] = (((iHEX60gensym444_872417481 >> 12) & 63) | 128);
          result_872417265[(resultIndexHEX60gensym394_872417270 + 4)] = (((iHEX60gensym444_872417481 >> 6) & 63) | 128);
          result_872417265[(resultIndexHEX60gensym394_872417270 + 5)] = ((iHEX60gensym444_872417481 & 63) | 128);
          resultIndexHEX60gensym394_872417270 += 6;
          }
          else {
          }
          }}}}}
        }
    } while (false);

  return result_872417265;

}

function any_1107296357(s_1107296359, pred_1107296361) {
  var result_1107296362 = false;

  BeforeRet: do {
    Label1: do {
      var i_1107296366 = [];
      var i_452984992 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_452984992 < (s_1107296359).length)) break Label3;
            i_1107296366 = s_1107296359[i_452984992];
            if (pred_1107296361(i_1107296366)) {
            result_1107296362 = true;
            break BeforeRet;
            }
            
            i_452984992 += 1;
          }
      } while (false);
    } while (false);
    result_1107296362 = false;
  } while (false);

  return result_1107296362;

}

function nsuFindChar(s_620758456, sub_620758457, start_620758458, last_620758459) {
    var Temporary1;

  var result_620758460 = 0;

  BeforeRet: do {
    if ((last_620758459 == 0)) {
    Temporary1 = (s_620758456).length - 1;
    }
    else {
    Temporary1 = last_620758459;
    }
    
    var last_620758461 = Temporary1;
    Label2: do {
      var i_620758471 = 0;
      var colontmp__452985001 = 0;
      colontmp__452985001 = start_620758458;
      var res_452985002 = colontmp__452985001;
      Label3: do {
          Label4: while (true) {
          if (!(res_452985002 <= last_620758461)) break Label4;
            i_620758471 = res_452985002;
            if ((sub_620758457 == s_620758456[i_620758471])) {
            result_620758460 = i_620758471;
            break BeforeRet;
            }
            
            res_452985002 += 1;
          }
      } while (false);
    } while (false);
    result_620758460 = -1;
    break BeforeRet;
  } while (false);

  return result_620758460;

}

function substr_33557907(s_33557908, first_33557909, last_33557910) {
  var result_33557911 = [];

    var first_33557912 = nimMax(first_33557909, 0);
    var L_33557913 = nimMax(((nimMin(last_33557910, (s_33557908).length - 1) - first_33557912) + 1), 0);
    result_33557911 = nimCopy(null, mnewString(L_33557913), NTI33554439);
    Label1: do {
      var i_33557918 = 0;
      var colontmp__452985005 = 0;
      colontmp__452985005 = (L_33557913 - 1);
      var res_452985006 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_452985006 <= colontmp__452985005)) break Label3;
            i_33557918 = res_452985006;
            result_33557911[i_33557918] = s_33557908[(i_33557918 + first_33557912)];
            res_452985006 += 1;
          }
      } while (false);
    } while (false);

  return result_33557911;

}

function substr_33557919(s_33557920, first_33557921) {
  var result_33557922 = [];

    result_33557922 = nimCopy(null, substr_33557907(s_33557920, first_33557921, (s_33557920).length - 1), NTI33554439);

  return result_33557922;

}

function fill_620758398(a_620758400, value_620758401) {
    var xHEX60gensym164_620758407 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(xHEX60gensym164_620758407 <= (a_620758400).length - 1)) break Label2;
          a_620758400[xHEX60gensym164_620758407] = value_620758401;
          xHEX60gensym164_620758407 += 1;
        }
    } while (false);

  
}

function nsuInitSkipTable(a_620758395, sub_620758396) {
    var m_620758397 = (sub_620758396).length;
    fill_620758398(a_620758395, m_620758397);
    Label1: do {
      var i_620758416 = 0;
      var colontmp__452985009 = 0;
      colontmp__452985009 = (m_620758397 - 1);
      var i_452985010 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_452985010 < colontmp__452985009)) break Label3;
            i_620758416 = i_452985010;
            a_620758395[sub_620758396[i_620758416]] = ((m_620758397 - 1) - i_620758416);
            i_452985010 += 1;
          }
      } while (false);
    } while (false);

  
}

function nsuFindStrA(a_620758436, s_620758437, sub_620758438, start_620758439, last_620758440) {
    var Temporary1;

  var result_620758441 = 0;

  BeforeRet: do {
    if ((last_620758440 == 0)) {
    Temporary1 = (s_620758437).length - 1;
    }
    else {
    Temporary1 = last_620758440;
    }
    
    var last_620758442 = Temporary1;
    var subLast_620758443 = ((sub_620758438).length - 1);
    if ((subLast_620758443 == -1)) {
    result_620758441 = start_620758439;
    break BeforeRet;
    }
    
    var skip_620758444 = start_620758439;
    Label2: do {
        Label3: while (true) {
        if (!(subLast_620758443 <= (last_620758442 - skip_620758444))) break Label3;
          var i_620758445 = subLast_620758443;
          Label4: do {
              Label5: while (true) {
              if (!(s_620758437[(skip_620758444 + i_620758445)] == sub_620758438[i_620758445])) break Label5;
                if ((i_620758445 == 0)) {
                result_620758441 = skip_620758444;
                break BeforeRet;
                }
                
                i_620758445 -= 1;
              }
          } while (false);
          skip_620758444 += a_620758436[s_620758437[(skip_620758444 + subLast_620758443)]];
        }
    } while (false);
    result_620758441 = -1;
    break BeforeRet;
  } while (false);

  return result_620758441;

}

function nsuReplaceStr(s_620758627, sub_620758628, by_620758629) {
  var result_620758630 = [];

    result_620758630 = nimCopy(null, [], NTI33554439);
    var subLen_620758631 = (sub_620758628).length;
    if ((subLen_620758631 == 0)) {
    result_620758630 = nimCopy(null, s_620758627, NTI33554439);
    }
    else {
    if ((subLen_620758631 == 1)) {
    var c_620758632 = sub_620758628[0];
    var last_620758633 = (s_620758627).length - 1;
    var i_620758634 = 0;
    Label1: do {
        Label2: while (true) {
        if (!true) break Label2;
          var j_620758635 = nsuFindChar(s_620758627, c_620758632, i_620758634, last_620758633);
          if ((j_620758635 < 0)) {
          break Label1;
          }
          
          result_620758630.push.apply(result_620758630, substr_33557907(s_620758627, i_620758634, (j_620758635 - 1)));;
          result_620758630.push.apply(result_620758630, by_620758629);;
          i_620758634 = (j_620758635 + subLen_620758631);
        }
    } while (false);
    result_620758630.push.apply(result_620758630, substr_33557919(s_620758627, i_620758634));;
    }
    else {
      var a_620758636 = [new Int32Array(256)];
      nsuInitSkipTable(a_620758636[0], sub_620758628);
      var last_620758637 = (s_620758627).length - 1;
      var i_620758638 = 0;
      Label3: do {
          Label4: while (true) {
          if (!true) break Label4;
            var j_620758639 = nsuFindStrA(a_620758636[0], s_620758627, sub_620758628, i_620758638, last_620758637);
            if ((j_620758639 < 0)) {
            break Label3;
            }
            
            result_620758630.push.apply(result_620758630, substr_33557907(s_620758627, i_620758638, (j_620758639 - 1)));;
            result_620758630.push.apply(result_620758630, by_620758629);;
            i_620758638 = (j_620758639 + subLen_620758631);
          }
      } while (false);
      result_620758630.push.apply(result_620758630, substr_33557919(s_620758627, i_620758638));;
    }
    }

  return result_620758630;

}

function searchValueContainsReplacedWords_1107296281(word_1107296282, searchValue_1107296283, replaceValue_1107296284) {
    replaceValue_1107296284 = nimCopy(null, replaceValue_1107296284, NTI33554439);
    
function HEX3Aanonymous_1107296286(w_1107296287) {
      var result_1107296288 = false;

      BeforeRet: do {
        Label1: do {
          var HEX3Atmp_1107296324 = toJSStr(w_1107296287).match(searchValue_1107296283) || [];
          var iHEX60gensym1_1107296327 = 0;
          var resultHEX60gensym1_1107296334 = newSeq_419430869((HEX3Atmp_1107296324).length);
          Label2: do {
            var it_1107296338 = null;
            var i_452984987 = 0;
            var L_452984988 = (HEX3Atmp_1107296324).length;
            Label3: do {
                Label4: while (true) {
                if (!(i_452984987 < L_452984988)) break Label4;
                  it_1107296338 = HEX3Atmp_1107296324[i_452984987];
                  resultHEX60gensym1_1107296334[iHEX60gensym1_1107296327] = nimCopy(null, cstrToNimstr(it_1107296338), NTI33554439);
                  iHEX60gensym1_1107296327 += 1;
                  i_452984987 += 1;
                }
            } while (false);
          } while (false);
        } while (false);
        var matches_1107296343 = nimCopy(null, resultHEX60gensym1_1107296334, NTI419430695);
        if ((0 < (matches_1107296343).length)) {
        var matchResult_1107296347 = nimCopy(null, matches_1107296343[0], NTI33554439);
        result_1107296288 = eqStrings(nsuReplaceStr(w_1107296287, matchResult_1107296347, replaceValue_1107296284), replaceValue_1107296284);
        break BeforeRet;
        }
        else {
          result_1107296288 = false;
          break BeforeRet;
        }
        
      } while (false);

      return result_1107296288;

    }

  var result_1107296285 = false;

  BeforeRet: do {
    result_1107296285 = any_1107296357(word_1107296282.replacedWords, HEX3Aanonymous_1107296286);
    break BeforeRet;
  } while (false);

  return result_1107296285;

}

function map_1107296426(s_1107296429, op_1107296431) {
  var result_1107296432 = [];

    result_1107296432 = new Array((s_1107296429).length); for (var i = 0 ; i < (s_1107296429).length ; ++i) { result_1107296432[i] = []; }    Label1: do {
      var i_1107296447 = 0;
      var colontmp__452985016 = 0;
      colontmp__452985016 = (s_1107296429).length;
      var i_452985017 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_452985017 < colontmp__452985016)) break Label3;
            i_1107296447 = i_452985017;
            result_1107296432[i_1107296447] = nimCopy(null, op_1107296431(s_1107296429[i_1107296447]), NTI33554439);
            i_452985017 += 1;
          }
      } while (false);
    } while (false);

  return result_1107296432;

}

function replace_1107296367(word_1107296368, searchValue_1107296369, replaceValue_1107296370, replaceReplacedWords_1107296371) {
      var Temporary1;
    replaceValue_1107296370 = nimCopy(null, replaceValue_1107296370, NTI33554439);
    
function HEX3Aanonymous_1107296423(w_1107296424) {
      var result_1107296425 = [];

        result_1107296425 = nimCopy(null, nsuReplaceStr(w_1107296424, w_1107296424, replaceValue_1107296370), NTI33554439);

      return result_1107296425;

    }

  BeforeRet: do {
      if (!!(replaceReplacedWords_1107296371)) Temporary1 = false; else {        Temporary1 = searchValueContainsReplacedWords_1107296281(word_1107296368, searchValue_1107296369, replaceValue_1107296370);      }    if (Temporary1) {
    break BeforeRet;
    }
    
    var replacingWord_1107296372 = nimCopy(null, word_1107296368.word, NTI33554439);
    Label2: do {
      var HEX3Atmp_1107296392 = toJSStr(word_1107296368.word).match(searchValue_1107296369) || [];
      var iHEX60gensym8_1107296395 = 0;
      var resultHEX60gensym8_1107296402 = newSeq_419430869((HEX3Atmp_1107296392).length);
      Label3: do {
        var it_1107296406 = null;
        var i_452984977 = 0;
        var L_452984978 = (HEX3Atmp_1107296392).length;
        Label4: do {
            Label5: while (true) {
            if (!(i_452984977 < L_452984978)) break Label5;
              it_1107296406 = HEX3Atmp_1107296392[i_452984977];
              resultHEX60gensym8_1107296402[iHEX60gensym8_1107296395] = nimCopy(null, cstrToNimstr(it_1107296406), NTI33554439);
              iHEX60gensym8_1107296395 += 1;
              i_452984977 += 1;
            }
        } while (false);
      } while (false);
    } while (false);
    var collection_1107296411 = nimCopy(null, resultHEX60gensym8_1107296402, NTI419430695);
    if ((0 < (collection_1107296411).length)) {
    replacingWord_1107296372 = nimCopy(null, cstrToNimstr(toJSStr(word_1107296368.word).replace(searchValue_1107296369, toJSStr(replaceValue_1107296370))), NTI33554439);
    }
    
    var replacedWords_1107296419 = [];
    if ((1 < (collection_1107296411).length)) {
    replacedWords_1107296419 = nimCopy(null, map_1107296426(collection_1107296411, HEX3Aanonymous_1107296423), NTI1107296396);
    }
    
    if (!(eqStrings(replacingWord_1107296372, word_1107296368.word))) {
    Label6: do {
      var w_1107296466 = [];
      var i_452984982 = 0;
      var L_452984983 = (replacedWords_1107296419).length;
      Label7: do {
          Label8: while (true) {
          if (!(i_452984982 < L_452984983)) break Label8;
            w_1107296466 = replacedWords_1107296419[i_452984982];
            var Temporary9 = nimCopy(null, w_1107296466, NTI33554439);
            word_1107296368.replacedWords.push(Temporary9);;
            i_452984982 += 1;
          }
      } while (false);
    } while (false);
    word_1107296368.word = nimCopy(null, replacingWord_1107296372, NTI33554439);
    }
    
  } while (false);

  
}

function mapFucToFwuc_1006633164(input_1006633165) {
    replace_1107296367(input_1006633165, FUC_TO_FWUC_1006633011, makeNimstrLit("$1wuc"), false);

  
}

function mapMomToMwom_1006633166(input_1006633167) {
    replace_1107296367(input_1006633167, MOM_TO_MWOM_1006633012, makeNimstrLit("$1wom"), false);

  
}

function mapTimeToTim_1006633180(input_1006633181) {
    replace_1107296367(input_1006633181, TIME_TO_TIM_1006633023, makeNimstrLit("$1im"), false);

  
}

function mapMeToMwe_1006633168(input_1006633169) {
    replace_1107296367(input_1006633169, ME_TO_MWE_1006633013, makeNimstrLit("$1we"), false);

  
}

function mapNVowelToNy_1006633170(input_1006633171) {
    replace_1107296367(input_1006633171, N_VOWEL_TO_NY_FIRST_1006633014, makeNimstrLit("ny$1"), false);
    replace_1107296367(input_1006633171, N_VOWEL_TO_NY_SECOND_1006633015, makeNimstrLit("Ny$1"), false);
    replace_1107296367(input_1006633171, N_VOWEL_TO_NY_THIRD_1006633016, makeNimstrLit("NY$1"), false);

  
}

function mapOverToOwor_1006633182(input_1006633183) {
    replace_1107296367(input_1006633183, OVER_TO_OWOR_1006633024, makeNimstrLit("$1wor"), false);

  
}

function mapOveToUv_1006633172(input_1006633173) {
    replace_1107296367(input_1006633173, OVE_TO_UV_LOWER_1006633018, makeNimstrLit("uv"), false);
    replace_1107296367(input_1006633173, OVE_TO_UV_UPPER_1006633017, makeNimstrLit("UV"), false);

  
}

function mapHahaToHeheXd_1006633174(input_1006633175) {
    replace_1107296367(input_1006633175, HAHA_TO_HEHE_XD_1006633019, makeNimstrLit("hehe xD"), false);

  
}

function mapTheToTeh_1006633176(input_1006633177) {
    replace_1107296367(input_1006633177, THE_TO_TEH_1006633020, makeNimstrLit("$1eh"), false);

  
}

function mapYouToU_1006633178(input_1006633179) {
    replace_1107296367(input_1006633179, YOU_TO_U_UPPER_1006633021, makeNimstrLit("U"), false);
    replace_1107296367(input_1006633179, YOU_TO_U_LOWER_1006633022, makeNimstrLit("u"), false);

  
}

function mapReadToWead_1006633046(input_1006633047) {
    replace_1107296367(input_1006633047, READ_TO_WEAD_UPPER_1006632972, makeNimstrLit("Wead"), false);
    replace_1107296367(input_1006633047, READ_TO_WEAD_LOWER_1006632973, makeNimstrLit("wead"), false);

  
}

function mapWorseToWose_1006633184(input_1006633185) {
    replace_1107296367(input_1006633185, WORSE_TO_WOSE_1006633025, makeNimstrLit("$1ose"), false);

  
}

function apply_939524272(s_939524274, op_939524276) {
    Label1: do {
      var i_939524285 = 0;
      var colontmp__452985020 = 0;
      colontmp__452985020 = (s_939524274).length;
      var i_452985021 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_452985021 < colontmp__452985020)) break Label3;
            i_939524285 = i_452985021;
            op_939524276(s_939524274[i_939524285]);
            i_452985021 += 1;
          }
      } while (false);
    } while (false);

  
}

function mapLlToWw_1006633112(input_1006633113) {
    replace_1107296367(input_1006633113, LL_TO_WW_1006632988, makeNimstrLit("ww"), false);

  
}

function mapVowelOrRExceptOLToWl_1006633114(input_1006633115) {
    replace_1107296367(input_1006633115, VOWEL_OR_R_EXCEPT_O_L_TO_WL_LOWER_1006632990, makeNimstrLit("wl"), false);
    replace_1107296367(input_1006633115, VOWEL_OR_R_EXCEPT_O_L_TO_WL_UPPER_1006632989, makeNimstrLit("W$1"), false);

  
}

function mapOldToOwld_1006633116(input_1006633117) {
    replace_1107296367(input_1006633117, OLD_TO_OWLD_LOWER_1006632992, makeNimstrLit("$1wld"), false);
    replace_1107296367(input_1006633117, OLD_TO_OWLD_UPPER_1006632991, makeNimstrLit("OWLD"), false);

  
}

function mapOlToOwl_1006633118(input_1006633119) {
    replace_1107296367(input_1006633119, OL_TO_OWL_LOWER_1006632994, makeNimstrLit("$1wl"), false);
    replace_1107296367(input_1006633119, OL_TO_OWL_UPPER_1006632993, makeNimstrLit("OWL"), false);

  
}

function mapLOrROToWo_1006633120(input_1006633121) {
    replace_1107296367(input_1006633121, LORR_O_TO_WO_LOWER_1006632996, makeNimstrLit("wo"), false);
    replace_1107296367(input_1006633121, LORR_O_TO_WO_UPPER_1006632995, makeNimstrLit("W$1"), false);

  
}

function isNone_1107296669(self_1107296671) {
  var result_1107296672 = false;

    result_1107296672 = !(self_1107296671.has);

  return result_1107296672;

}

function add_33556420(x_33556421, x_33556421_Idx, y_33556422) {
          if (x_33556421[x_33556421_Idx] === null) { x_33556421[x_33556421_Idx] = []; }
      var off = x_33556421[x_33556421_Idx].length;
      x_33556421[x_33556421_Idx].length += y_33556422.length;
      for (var i = 0; i < y_33556422.length; ++i) {
        x_33556421[x_33556421_Idx][off+i] = y_33556422.charCodeAt(i);
      }
    

  
}

function unhandledException(e_33556664) {
    var buf_33556665 = [[]];
    if (!(((e_33556664.message).length == 0))) {
    buf_33556665[0].push.apply(buf_33556665[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_33556665[0].push.apply(buf_33556665[0], e_33556664.message);;
    }
    else {
    buf_33556665[0].push.apply(buf_33556665[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_33556665[0].push.apply(buf_33556665[0], makeNimstrLit(" ["));;
    add_33556420(buf_33556665, 0, e_33556664.name);
    buf_33556665[0].push.apply(buf_33556665[0], makeNimstrLit("]\x0A"));;
    var cbuf_33556666 = toJSStr(buf_33556665[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556666);
  }
  else {
    throw cbuf_33556666;
  }
  

  
}

function get_1107296661(self_1107296663) {
  var result_1107296664 = ({captures: []});

    if (isNone_1107296669(self_1107296663)) {
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI1056964628, name: null, trace: [], up: null}, "UnpackDefect");
    }
    
    result_1107296664 = self_1107296663.val;

  return result_1107296664;

}

function some_1107296635(val_1107296637) {
  var result_1107296638 = ({val: ({captures: []}), has: false});

    result_1107296638.has = true;
    result_1107296638.val = nimCopy(result_1107296638.val, val_1107296637, NTI1140850697);

  return result_1107296638;

}

function replaceWithProcMultiple_1107296547(word_1107296548, searchValue_1107296549, op_1107296553, replaceReplacedWords_1107296554) {
      var Temporary9;
    
function HEX3Aanonymous_1107296734(w_1107296735) {
      var result_1107296736 = [];

        result_1107296736 = nimCopy(null, nsuReplaceStr(w_1107296735, w_1107296735, replaceValue_1107296685), NTI33554439);

      return result_1107296736;

    }

  BeforeRet: do {
      Label1: do {
        var HEX3Atmp_1107296574 = toJSStr(word_1107296548.word).match(searchValue_1107296549) || [];
        var iHEX60gensym25_1107296577 = 0;
        var resultHEX60gensym25_1107296584 = newSeq_419430869((HEX3Atmp_1107296574).length);
        Label2: do {
          var it_1107296588 = null;
          var i_452985025 = 0;
          var L_452985026 = (HEX3Atmp_1107296574).length;
          Label3: do {
              Label4: while (true) {
              if (!(i_452985025 < L_452985026)) break Label4;
                it_1107296588 = HEX3Atmp_1107296574[i_452985025];
                resultHEX60gensym25_1107296584[iHEX60gensym25_1107296577] = nimCopy(null, cstrToNimstr(it_1107296588), NTI33554439);
                iHEX60gensym25_1107296577 += 1;
                i_452985025 += 1;
              }
          } while (false);
        } while (false);
      } while (false);
    if (((resultHEX60gensym25_1107296584).length == 0)) {
    break BeforeRet;
    }
    
    var innerWord_1107296596 = nimCopy(null, word_1107296548.word, NTI33554439);
    Label5: do {
      var HEX3Atmp_1107296616 = toJSStr(innerWord_1107296596).match(searchValue_1107296549) || [];
      var iHEX60gensym29_1107296619 = 0;
      var resultHEX60gensym29_1107296626 = newSeq_419430869((HEX3Atmp_1107296616).length);
      Label6: do {
        var it_1107296630 = null;
        var i_452985030 = 0;
        var L_452985031 = (HEX3Atmp_1107296616).length;
        Label7: do {
            Label8: while (true) {
            if (!(i_452985030 < L_452985031)) break Label8;
              it_1107296630 = HEX3Atmp_1107296616[i_452985030];
              resultHEX60gensym29_1107296626[iHEX60gensym29_1107296619] = nimCopy(null, cstrToNimstr(it_1107296630), NTI33554439);
              iHEX60gensym29_1107296619 += 1;
              i_452985030 += 1;
            }
        } while (false);
      } while (false);
    } while (false);
    var captures_1107296684 = nimCopy(null, get_1107296661(some_1107296635({captures: nimCopy(null, resultHEX60gensym29_1107296626, NTI419430695)})), NTI1140850697);
    var replaceValue_1107296685 = op_1107296553(captures_1107296684.captures[0], captures_1107296684.captures[1]);
      if (!!(replaceReplacedWords_1107296554)) Temporary9 = false; else {        Temporary9 = searchValueContainsReplacedWords_1107296281(word_1107296548, searchValue_1107296549, replaceValue_1107296685);      }    if (Temporary9) {
    break BeforeRet;
    }
    
    Label10: do {
      var HEX3Atmp_1107296705 = toJSStr(word_1107296548.word).match(searchValue_1107296549) || [];
      var iHEX60gensym34_1107296708 = 0;
      var resultHEX60gensym34_1107296715 = newSeq_419430869((HEX3Atmp_1107296705).length);
      Label11: do {
        var it_1107296719 = null;
        var i_452985035 = 0;
        var L_452985036 = (HEX3Atmp_1107296705).length;
        Label12: do {
            Label13: while (true) {
            if (!(i_452985035 < L_452985036)) break Label13;
              it_1107296719 = HEX3Atmp_1107296705[i_452985035];
              resultHEX60gensym34_1107296715[iHEX60gensym34_1107296708] = nimCopy(null, cstrToNimstr(it_1107296719), NTI33554439);
              iHEX60gensym34_1107296708 += 1;
              i_452985035 += 1;
            }
        } while (false);
      } while (false);
    } while (false);
    var collection_1107296724 = nimCopy(null, resultHEX60gensym34_1107296715, NTI419430695);
    var replacingWord_1107296725 = nsuReplaceStr(word_1107296548.word, collection_1107296724[0], replaceValue_1107296685);
    var replacedWords_1107296730 = [];
    if ((1 < (collection_1107296724).length)) {
    replacedWords_1107296730 = nimCopy(null, map_1107296426(collection_1107296724, HEX3Aanonymous_1107296734), NTI1107296396);
    }
    
    if (!(eqStrings(replacingWord_1107296725, word_1107296548.word))) {
    Label14: do {
      var w_1107296746 = [];
      var i_452985039 = 0;
      var L_452985040 = (replacedWords_1107296730).length;
      Label15: do {
          Label16: while (true) {
          if (!(i_452985039 < L_452985040)) break Label16;
            w_1107296746 = replacedWords_1107296730[i_452985039];
            var Temporary17 = nimCopy(null, w_1107296746, NTI33554439);
            word_1107296548.replacedWords.push(Temporary17);;
            i_452985039 += 1;
          }
      } while (false);
    } while (false);
    word_1107296548.word = nimCopy(null, replacingWord_1107296725, NTI33554439);
    }
    
  } while (false);

  
}

function nuctoUpper(c_872416302) {
      var Temporary1;
      var Temporary2;
      var Temporary3;

  var result_872416303 = 0;

  BeforeRet: do {
    var c_872416304 = c_872416302;
    var p_872416313 = binarySearch_872416243(c_872416304, toUpperRanges_872416155, 46, 3);
      if (!(0 <= p_872416313)) Temporary2 = false; else {        Temporary2 = (toUpperRanges_872416155[p_872416313] <= ((c_872416304) | 0));      }      if (!Temporary2) Temporary1 = false; else {        Temporary1 = (((c_872416304) | 0) <= toUpperRanges_872416155[(p_872416313 + 1)]);      }    if (Temporary1) {
    result_872416303 = ((((((c_872416304) | 0) + toUpperRanges_872416155[(p_872416313 + 2)]) - 500)) | 0);
    break BeforeRet;
    }
    
    p_872416313 = binarySearch_872416243(c_872416304, toUpperSinglets_872416156, 624, 2);
      if (!(0 <= p_872416313)) Temporary3 = false; else {        Temporary3 = (((c_872416304) | 0) == toUpperSinglets_872416156[p_872416313]);      }    if (Temporary3) {
    result_872416303 = ((((((c_872416304) | 0) + toUpperSinglets_872416156[(p_872416313 + 1)]) - 500)) | 0);
    break BeforeRet;
    }
    
    result_872416303 = c_872416304;
    break BeforeRet;
  } while (false);

  return result_872416303;

}

function nuctoUpperStr(s_872416901) {
  var result_872416902 = [];

    result_872416902 = nimCopy(null, mnewString((s_872416901).length), NTI33554439);
    var iHEX60gensym307_872416906 = 0;
    var resultIndexHEX60gensym307_872416907 = 0;
    var runeHEX60gensym307_872416908 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(iHEX60gensym307_872416906 < (s_872416901).length)) break Label2;
          if ((s_872416901[iHEX60gensym307_872416906] <= 127)) {
          runeHEX60gensym307_872416908 = s_872416901[iHEX60gensym307_872416906];
          iHEX60gensym307_872416906 += 1;
          }
          else {
          if (((s_872416901[iHEX60gensym307_872416906] >>> 5) == 6)) {
          if ((iHEX60gensym307_872416906 <= ((s_872416901).length - 2))) {
          runeHEX60gensym307_872416908 = (((s_872416901[iHEX60gensym307_872416906] & 31) << 6) | (s_872416901[(iHEX60gensym307_872416906 + 1)] & 63));
          iHEX60gensym307_872416906 += 2;
          }
          else {
            runeHEX60gensym307_872416908 = 65533;
            iHEX60gensym307_872416906 += 1;
          }
          
          }
          else {
          if (((s_872416901[iHEX60gensym307_872416906] >>> 4) == 14)) {
          if ((iHEX60gensym307_872416906 <= ((s_872416901).length - 3))) {
          runeHEX60gensym307_872416908 = ((((s_872416901[iHEX60gensym307_872416906] & 15) << 12) | ((s_872416901[(iHEX60gensym307_872416906 + 1)] & 63) << 6)) | (s_872416901[(iHEX60gensym307_872416906 + 2)] & 63));
          iHEX60gensym307_872416906 += 3;
          }
          else {
            runeHEX60gensym307_872416908 = 65533;
            iHEX60gensym307_872416906 += 1;
          }
          
          }
          else {
          if (((s_872416901[iHEX60gensym307_872416906] >>> 3) == 30)) {
          if ((iHEX60gensym307_872416906 <= ((s_872416901).length - 4))) {
          runeHEX60gensym307_872416908 = (((((s_872416901[iHEX60gensym307_872416906] & 7) << 18) | ((s_872416901[(iHEX60gensym307_872416906 + 1)] & 63) << 12)) | ((s_872416901[(iHEX60gensym307_872416906 + 2)] & 63) << 6)) | (s_872416901[(iHEX60gensym307_872416906 + 3)] & 63));
          iHEX60gensym307_872416906 += 4;
          }
          else {
            runeHEX60gensym307_872416908 = 65533;
            iHEX60gensym307_872416906 += 1;
          }
          
          }
          else {
          if (((s_872416901[iHEX60gensym307_872416906] >>> 2) == 62)) {
          if ((iHEX60gensym307_872416906 <= ((s_872416901).length - 5))) {
          runeHEX60gensym307_872416908 = ((((((s_872416901[iHEX60gensym307_872416906] & 3) << 24) | ((s_872416901[(iHEX60gensym307_872416906 + 1)] & 63) << 18)) | ((s_872416901[(iHEX60gensym307_872416906 + 2)] & 63) << 12)) | ((s_872416901[(iHEX60gensym307_872416906 + 3)] & 63) << 6)) | (s_872416901[(iHEX60gensym307_872416906 + 4)] & 63));
          iHEX60gensym307_872416906 += 5;
          }
          else {
            runeHEX60gensym307_872416908 = 65533;
            iHEX60gensym307_872416906 += 1;
          }
          
          }
          else {
          if (((s_872416901[iHEX60gensym307_872416906] >>> 1) == 126)) {
          if ((iHEX60gensym307_872416906 <= ((s_872416901).length - 6))) {
          runeHEX60gensym307_872416908 = (((((((s_872416901[iHEX60gensym307_872416906] & 1) << 30) | ((s_872416901[(iHEX60gensym307_872416906 + 1)] & 63) << 24)) | ((s_872416901[(iHEX60gensym307_872416906 + 2)] & 63) << 18)) | ((s_872416901[(iHEX60gensym307_872416906 + 3)] & 63) << 12)) | ((s_872416901[(iHEX60gensym307_872416906 + 4)] & 63) << 6)) | (s_872416901[(iHEX60gensym307_872416906 + 5)] & 63));
          iHEX60gensym307_872416906 += 6;
          }
          else {
            runeHEX60gensym307_872416908 = 65533;
            iHEX60gensym307_872416906 += 1;
          }
          
          }
          else {
            runeHEX60gensym307_872416908 = s_872416901[iHEX60gensym307_872416906];
            iHEX60gensym307_872416906 += 1;
          }
          }}}}}
          runeHEX60gensym307_872416908 = nuctoUpper(runeHEX60gensym307_872416908);
          var iHEX60gensym357_872417118 = runeHEX60gensym307_872416908;
          if (HEX3CHEX3DHEX25_33555429(iHEX60gensym357_872417118, 127)) {
          (result_872416902.length = (resultIndexHEX60gensym307_872416907 + 1));
          result_872416902[(resultIndexHEX60gensym307_872416907 + 0)] = iHEX60gensym357_872417118;
          resultIndexHEX60gensym307_872416907 += 1;
          }
          else {
          if (HEX3CHEX3DHEX25_33555429(iHEX60gensym357_872417118, 2047)) {
          (result_872416902.length = (resultIndexHEX60gensym307_872416907 + 2));
          result_872416902[(resultIndexHEX60gensym307_872416907 + 0)] = ((iHEX60gensym357_872417118 >> 6) | 192);
          result_872416902[(resultIndexHEX60gensym307_872416907 + 1)] = ((iHEX60gensym357_872417118 & 63) | 128);
          resultIndexHEX60gensym307_872416907 += 2;
          }
          else {
          if (HEX3CHEX3DHEX25_33555429(iHEX60gensym357_872417118, 65535)) {
          (result_872416902.length = (resultIndexHEX60gensym307_872416907 + 3));
          result_872416902[(resultIndexHEX60gensym307_872416907 + 0)] = ((iHEX60gensym357_872417118 >> 12) | 224);
          result_872416902[(resultIndexHEX60gensym307_872416907 + 1)] = (((iHEX60gensym357_872417118 >> 6) & 63) | 128);
          result_872416902[(resultIndexHEX60gensym307_872416907 + 2)] = ((iHEX60gensym357_872417118 & 63) | 128);
          resultIndexHEX60gensym307_872416907 += 3;
          }
          else {
          if (HEX3CHEX3DHEX25_33555429(iHEX60gensym357_872417118, 2097151)) {
          (result_872416902.length = (resultIndexHEX60gensym307_872416907 + 4));
          result_872416902[(resultIndexHEX60gensym307_872416907 + 0)] = ((iHEX60gensym357_872417118 >> 18) | 240);
          result_872416902[(resultIndexHEX60gensym307_872416907 + 1)] = (((iHEX60gensym357_872417118 >> 12) & 63) | 128);
          result_872416902[(resultIndexHEX60gensym307_872416907 + 2)] = (((iHEX60gensym357_872417118 >> 6) & 63) | 128);
          result_872416902[(resultIndexHEX60gensym307_872416907 + 3)] = ((iHEX60gensym357_872417118 & 63) | 128);
          resultIndexHEX60gensym307_872416907 += 4;
          }
          else {
          if (HEX3CHEX3DHEX25_33555429(iHEX60gensym357_872417118, 67108863)) {
          (result_872416902.length = (resultIndexHEX60gensym307_872416907 + 5));
          result_872416902[(resultIndexHEX60gensym307_872416907 + 0)] = ((iHEX60gensym357_872417118 >> 24) | 248);
          result_872416902[(resultIndexHEX60gensym307_872416907 + 1)] = (((iHEX60gensym357_872417118 >> 18) & 63) | 128);
          result_872416902[(resultIndexHEX60gensym307_872416907 + 2)] = (((iHEX60gensym357_872417118 >> 12) & 63) | 128);
          result_872416902[(resultIndexHEX60gensym307_872416907 + 3)] = (((iHEX60gensym357_872417118 >> 6) & 63) | 128);
          result_872416902[(resultIndexHEX60gensym307_872416907 + 4)] = ((iHEX60gensym357_872417118 & 63) | 128);
          resultIndexHEX60gensym307_872416907 += 5;
          }
          else {
          if (HEX3CHEX3DHEX25_33555429(iHEX60gensym357_872417118, 2147483647)) {
          (result_872416902.length = (resultIndexHEX60gensym307_872416907 + 6));
          result_872416902[(resultIndexHEX60gensym307_872416907 + 0)] = ((iHEX60gensym357_872417118 >> 30) | 252);
          result_872416902[(resultIndexHEX60gensym307_872416907 + 1)] = (((iHEX60gensym357_872417118 >> 24) & 63) | 128);
          result_872416902[(resultIndexHEX60gensym307_872416907 + 2)] = (((iHEX60gensym357_872417118 >> 18) & 63) | 128);
          result_872416902[(resultIndexHEX60gensym307_872416907 + 3)] = (((iHEX60gensym357_872417118 >> 12) & 63) | 128);
          result_872416902[(resultIndexHEX60gensym307_872416907 + 4)] = (((iHEX60gensym357_872417118 >> 6) & 63) | 128);
          result_872416902[(resultIndexHEX60gensym307_872416907 + 5)] = ((iHEX60gensym357_872417118 & 63) | 128);
          resultIndexHEX60gensym307_872416907 += 6;
          }
          else {
          }
          }}}}}
        }
    } while (false);

  return result_872416902;

}

function mapSpecificConsonantsOToLetterAndWo_1006633122(input_1006633123) {
    
function HEX3Aanonymous_1006633124(s1_1006633125, s2_1006633126) {
        var Temporary1;

      var result_1006633127 = [];

        if (eqStrings(nuctoUpperStr(s2_1006633126), s2_1006633126)) {
        Temporary1 = makeNimstrLit("W");
        }
        else {
        Temporary1 = makeNimstrLit("w");
        }
        
        result_1006633127 = nimCopy(null, (s1_1006633125 || []).concat(Temporary1 || [],s2_1006633126 || []), NTI33554439);

      return result_1006633127;

    }

    replace_1107296367(input_1006633123, SPECIFIC_CONSONANTS_O_TO_LETTER_AND_WO_LOWER_1006632998, makeNimstrLit("$1wo"), false);
    replaceWithProcMultiple_1107296547(input_1006633123, SPECIFIC_CONSONANTS_O_TO_LETTER_AND_WO_UPPER_1006632997, HEX3Aanonymous_1006633124, false);

  
}

function mapVOrWLeToWal_1006633146(input_1006633147) {
    replace_1107296367(input_1006633147, VORW_LE_TO_WAL_1006632999, makeNimstrLit("wal"), false);

  
}

function mapFiToFwi_1006633148(input_1006633149) {
    replace_1107296367(input_1006633149, FI_TO_FWI_LOWER_1006633001, makeNimstrLit("$1wi"), false);
    replace_1107296367(input_1006633149, FI_TO_FWI_UPPER_1006633000, makeNimstrLit("FWI"), false);

  
}

function mapVerToWer_1006633150(input_1006633151) {
    replace_1107296367(input_1006633151, VER_TO_WER_1006633002, makeNimstrLit("wer"), false);

  
}

function mapPoiToPwoi_1006633152(input_1006633153) {
    replace_1107296367(input_1006633153, POI_TO_PWOI_1006633003, makeNimstrLit("$1woi"), false);

  
}

function mapSpecificConsonantsLeToLetterAndWal_1006633154(input_1006633155) {
    replace_1107296367(input_1006633155, SPECIFIC_CONSONANTS_LE_TO_LETTER_AND_WAL_1006633004, makeNimstrLit("$1wal"), false);

  
}

function mapConsonantRToConsonantW_1006633156(input_1006633157) {
    replace_1107296367(input_1006633157, CONSONANT_R_TO_CONSONANT_W_1006633005, makeNimstrLit("$1w"), false);

  
}

function mapLyToWy_1006633158(input_1006633159) {
    replace_1107296367(input_1006633159, LY_TO_WY_LOWER_1006633007, makeNimstrLit("wy"), false);
    replace_1107296367(input_1006633159, LY_TO_WY_UPPER_1006633006, makeNimstrLit("Wy"), false);

  
}

function mapPleToPwe_1006633160(input_1006633161) {
    replace_1107296367(input_1006633161, PLE_TO_PWE_1006633008, makeNimstrLit("$1we"), false);

  
}

function mapNrToNw_1006633162(input_1006633163) {
    replace_1107296367(input_1006633163, NR_TO_NW_LOWER_1006633010, makeNimstrLit("nw"), false);
    replace_1107296367(input_1006633163, NR_TO_NW_UPPER_1006633009, makeNimstrLit("NW"), false);

  
}

function mapBracketsToStarTrails_1006633048(input_1006633049) {
    replace_1107296367(input_1006633049, BRACKETS_TO_STARTRAILS_FORE_1006632974, makeNimstrLit("\xEF\xBD\xA1\xEF\xBD\xA5:*:\xEF\xBD\xA5\xEF\xBE\x9F\xE2\x98\x85,\xEF\xBD\xA1\xEF\xBD\xA5:*:\xEF\xBD\xA5\xEF\xBE\x9F\xE2\x98\x86"), false);
    replace_1107296367(input_1006633049, BRACKETS_TO_STARTRAILS_REAR_1006632975, makeNimstrLit("\xE2\x98\x86\xEF\xBE\x9F\xEF\xBD\xA5:*:\xEF\xBD\xA5\xEF\xBD\xA1,\xE2\x98\x85\xEF\xBE\x9F\xEF\xBD\xA5:*:\xEF\xBD\xA5\xEF\xBD\xA1"), false);

  
}

function replaceWithProcSingle_1107296471(word_1107296472, searchValue_1107296473, op_1107296475, replaceReplacedWords_1107296476) {
      var Temporary1;
    
function HEX3Aanonymous_1107296530(w_1107296531) {
      var result_1107296532 = [];

        result_1107296532 = nimCopy(null, nsuReplaceStr(w_1107296531, w_1107296531, replaceValue_1107296477), NTI33554439);

      return result_1107296532;

    }

  BeforeRet: do {
    var replaceValue_1107296477 = op_1107296475();
      if (!!(replaceReplacedWords_1107296476)) Temporary1 = false; else {        Temporary1 = searchValueContainsReplacedWords_1107296281(word_1107296472, searchValue_1107296473, replaceValue_1107296477);      }    if (Temporary1) {
    break BeforeRet;
    }
    
    var replacingWord_1107296478 = nimCopy(null, word_1107296472.word, NTI33554439);
    Label2: do {
      var HEX3Atmp_1107296498 = toJSStr(word_1107296472.word).match(searchValue_1107296473) || [];
      var iHEX60gensym18_1107296501 = 0;
      var resultHEX60gensym18_1107296508 = newSeq_419430869((HEX3Atmp_1107296498).length);
      Label3: do {
        var it_1107296512 = null;
        var i_452985045 = 0;
        var L_452985046 = (HEX3Atmp_1107296498).length;
        Label4: do {
            Label5: while (true) {
            if (!(i_452985045 < L_452985046)) break Label5;
              it_1107296512 = HEX3Atmp_1107296498[i_452985045];
              resultHEX60gensym18_1107296508[iHEX60gensym18_1107296501] = nimCopy(null, cstrToNimstr(it_1107296512), NTI33554439);
              iHEX60gensym18_1107296501 += 1;
              i_452985045 += 1;
            }
        } while (false);
      } while (false);
    } while (false);
    var collection_1107296517 = nimCopy(null, resultHEX60gensym18_1107296508, NTI419430695);
    if ((0 < (collection_1107296517).length)) {
    var match_1107296521 = nimCopy(null, collection_1107296517[0], NTI33554439);
    replacingWord_1107296478 = nimCopy(null, nsuReplaceStr(word_1107296472.word, match_1107296521, replaceValue_1107296477), NTI33554439);
    }
    
    var replacedWords_1107296526 = [];
    if ((1 < (collection_1107296517).length)) {
    replacedWords_1107296526 = nimCopy(null, map_1107296426(collection_1107296517, HEX3Aanonymous_1107296530), NTI1107296396);
    }
    
    if (!(eqStrings(replacingWord_1107296478, word_1107296472.word))) {
    Label6: do {
      var w_1107296542 = [];
      var i_452985049 = 0;
      var L_452985050 = (replacedWords_1107296526).length;
      Label7: do {
          Label8: while (true) {
          if (!(i_452985049 < L_452985050)) break Label8;
            w_1107296542 = replacedWords_1107296526[i_452985049];
            var Temporary9 = nimCopy(null, w_1107296542, NTI33554439);
            word_1107296472.replacedWords.push(Temporary9);;
            i_452985049 += 1;
          }
      } while (false);
    } while (false);
    word_1107296472.word = nimCopy(null, replacingWord_1107296478, NTI33554439);
    }
    
  } while (false);

  
}

function rotl_1023410207(x_1023410208, k_1023410209) {
  var result_1023410210 = 0;

    result_1023410210 = ((x_1023410208 << k_1023410209) | (x_1023410208 >>> ((64 - k_1023410209) >>> 0)));

  return result_1023410210;

}

function next_1023410219(r_1023410220) {
  var result_1023410221 = 0;

    var s0_1023410222 = r_1023410220.a0;
    var s1_1023410223 = r_1023410220.a1;
    result_1023410221 = ((s0_1023410222 + s1_1023410223) >>> 0);
    s1_1023410223 = (s1_1023410223 ^ s0_1023410222);
    r_1023410220.a0 = ((rotl_1023410207(s0_1023410222, 55) ^ s1_1023410223) ^ (s1_1023410223 << 14));
    r_1023410220.a1 = rotl_1023410207(s1_1023410223, 36);

  return result_1023410221;

}

function rand_1023410280(r_1023410282, max_1023410283) {
  var result_1023410284 = 0;

  BeforeRet: do {
    if ((max_1023410283 == 0)) {
    break BeforeRet;
    }
    else {
      var max_1023410285 = max_1023410283;
      if ((max_1023410285 == -1)) {
      result_1023410284 = next_1023410219(r_1023410282);
      break BeforeRet;
      }
      
      Label1: do {
          Label2: while (true) {
          if (!true) break Label2;
            var x_1023410298 = next_1023410219(r_1023410282);
            if ((x_1023410298 <= ((4294967295 - (4294967295 % max_1023410285)) ))) {
            result_1023410284 = (x_1023410298 % ((max_1023410285 + 1) ));
            break BeforeRet;
            }
            
          }
      } while (false);
    }
    
  } while (false);

  return result_1023410284;

}

function rand_1023410276(r_1023410277, max_1023410278) {
  var result_1023410279 = 0;

    result_1023410279 = rand_1023410280(r_1023410277, max_1023410278);

  return result_1023410279;

}

function rand_1023410299(max_1023410300) {
  var result_1023410301 = 0;

    result_1023410301 = rand_1023410276(state_1023410189[0], max_1023410300);

  return result_1023410301;

}

function mapPeriodCommaExclamationSemicolonToKaomojis_1006633050(input_1006633051) {
    
function HEX3Aanonymous_1006633052() {
      var result_1006633053 = [];

        result_1006633053 = nimCopy(null, FACES_1006633026[rand_1023410299(28)], NTI33554439);

      return result_1006633053;

    }
    
function HEX3Aanonymous_1006633071() {
      var result_1006633072 = [];

        result_1006633072 = nimCopy(null, FACES_1006633026[rand_1023410299(28)], NTI33554439);

      return result_1006633072;

    }

    replaceWithProcSingle_1107296471(input_1006633051, PERIOD_COMMA_EXCLAMATION_SEMICOLON_TO_KAOMOJIS_FIRST_1006632976, HEX3Aanonymous_1006633052, false);
    replaceWithProcSingle_1107296471(input_1006633051, PERIOD_COMMA_EXCLAMATION_SEMICOLON_TO_KAOMOJIS_SECOND_1006632977, HEX3Aanonymous_1006633071, false);

  
}

function mapThatToDat_1006633100(input_1006633101) {
    replace_1107296367(input_1006633101, THAT_TO_DAT_LOWER_1006632979, makeNimstrLit("dat"), false);
    replace_1107296367(input_1006633101, THAT_TO_DAT_UPPER_1006632978, makeNimstrLit("Dat"), false);

  
}

function mapThToF_1006633102(input_1006633103) {
    replace_1107296367(input_1006633103, TH_TO_F_LOWER_1006632981, makeNimstrLit("f"), false);
    replace_1107296367(input_1006633103, TH_TO_F_UPPER_1006632980, makeNimstrLit("F"), false);

  
}

function mapLeToWal_1006633104(input_1006633105) {
    replace_1107296367(input_1006633105, LE_TO_WAL_1006632982, makeNimstrLit("wal"), false);

  
}

function mapVeToWe_1006633106(input_1006633107) {
    replace_1107296367(input_1006633107, VE_TO_WE_LOWER_1006632984, makeNimstrLit("we"), false);
    replace_1107296367(input_1006633107, VE_TO_WE_UPPER_1006632983, makeNimstrLit("We"), false);

  
}

function mapRyToWwy_1006633108(input_1006633109) {
    replace_1107296367(input_1006633109, RY_TO_WWY_1006632985, makeNimstrLit("wwy"), false);

  
}

function mapROrLToW_1006633110(input_1006633111) {
    replace_1107296367(input_1006633111, RORL_TO_W_LOWER_1006632987, makeNimstrLit("w"), false);
    replace_1107296367(input_1006633111, RORL_TO_W_UPPER_1006632986, makeNimstrLit("W"), false);

  
}

function mapOToOwO_1006633036(input_1006633037) {
    var Temporary1;

    if ((0 < rand_1023410299(1))) {
    Temporary1 = makeNimstrLit("owo");
    }
    else {
    Temporary1 = makeNimstrLit("o");
    }
    
    replace_1107296367(input_1006633037, O_TO_OWO_1006632966, Temporary1, false);

  
}

function mapEwToUwU_1006633038(input_1006633039) {
    replace_1107296367(input_1006633039, EW_TO_UWU_1006632967, makeNimstrLit("uwu"), false);

  
}

function mapHeyToHay_1006633040(input_1006633041) {
    replace_1107296367(input_1006633041, HEY_TO_HAY_1006632968, makeNimstrLit("$1ay"), false);

  
}

function mapDeadToDed_1006633042(input_1006633043) {
    replace_1107296367(input_1006633043, DEAD_TO_DED_UPPER_1006632969, makeNimstrLit("Ded"), false);
    replace_1107296367(input_1006633043, DEAD_TO_DED_LOWER_1006632970, makeNimstrLit("ded"), false);

  
}

function mapNVowelTToNd_1006633044(input_1006633045) {
    replace_1107296367(input_1006633045, N_VOWEL_T_TO_ND_1006632971, makeNimstrLit("nd"), false);

  
}

function HEX40_939524454(a_939524456) {
  var result_939524457 = [];

    result_939524457 = new Array((a_939524456).length); for (var i = 0 ; i < (a_939524456).length ; ++i) { result_939524457[i] = ({word: [], replacedWords: []}); }    Label1: do {
      var i_939524472 = 0;
      var colontmp__452985058 = 0;
      colontmp__452985058 = ((a_939524456).length - 1);
      var res_452985059 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_452985059 <= colontmp__452985058)) break Label3;
            i_939524472 = res_452985059;
            result_939524457[i_939524472] = nimCopy(result_939524457[i_939524472], a_939524456[i_939524472], NTI1107296259);
            res_452985059 += 1;
          }
      } while (false);
    } while (false);

  return result_939524457;

}

function add_939524556(x_939524558, x_939524558_Idx, y_939524559) {
    var Temporary1;

    var xl_939524563 = (x_939524558[x_939524558_Idx]).length;
    if (x_939524558[x_939524558_Idx].length < (Temporary1 = (xl_939524563 + (y_939524559).length), Temporary1)) { for (var i = x_939524558[x_939524558_Idx].length ; i < Temporary1 ; ++i) x_939524558[x_939524558_Idx].push(({word: [], replacedWords: []})); }
               else { x_939524558[x_939524558_Idx].length = Temporary1; };
    Label2: do {
      var i_939524578 = 0;
      var colontmp__452985062 = 0;
      colontmp__452985062 = (y_939524559).length - 1;
      var res_452985063 = 0;
      Label3: do {
          Label4: while (true) {
          if (!(res_452985063 <= colontmp__452985062)) break Label4;
            i_939524578 = res_452985063;
            x_939524558[x_939524558_Idx][(xl_939524563 + i_939524578)] = nimCopy(x_939524558[x_939524558_Idx][(xl_939524563 + i_939524578)], y_939524559[i_939524578], NTI1107296259);
            res_452985063 += 1;
          }
      } while (false);
    } while (false);

  
}

function HEX5BHEX5D_939524536(s_939524540, x_939524541) {
  var result_939524542 = [];

    var a_939524544 = x_939524541.a;
    var L_939524546 = ((x_939524541.b - a_939524544) + 1);
    result_939524542 = new Array(L_939524546); for (var i = 0 ; i < L_939524546 ; ++i) { result_939524542[i] = ({word: [], replacedWords: []}); }    Label1: do {
      var i_939524555 = 0;
      var i_452985066 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_452985066 < L_939524546)) break Label3;
            i_939524555 = i_452985066;
            result_939524542[i_939524555] = nimCopy(result_939524542[i_939524555], s_939524540[(i_939524555 + a_939524544)], NTI1107296259);
            i_452985066 += 1;
          }
      } while (false);
    } while (false);

  return result_939524542;

}

function HEX2EHEX2E_872416081(a_872416084, b_872416085) {
  var result_872416086 = ({a: 0, b: 0});

    result_872416086 = nimCopy(result_872416086, {a: a_872416084, b: b_872416085}, NTI671088701);

  return result_872416086;

}

function interleaveArrays_939524443(a_939524445, b_939524446) {
    var Temporary1;
    var Temporary2;

  var result_939524447 = [[]];

    if (((a_939524445).length < (b_939524446).length)) {
    Temporary1 = HEX40_939524454(a_939524445);
    }
    else {
    Temporary1 = HEX40_939524454(b_939524446);
    }
    
    var minSeq_939524476 = nimCopy(null, Temporary1, NTI939524408);
    if (((a_939524445).length < (b_939524446).length)) {
    Temporary2 = HEX40_939524454(b_939524446);
    }
    else {
    Temporary2 = HEX40_939524454(a_939524445);
    }
    
    var maxSeq_939524489 = nimCopy(null, Temporary2, NTI939524408);
    Label3: do {
      var i_939524498 = 0;
      var colontmp__452985054 = 0;
      colontmp__452985054 = (minSeq_939524476).length;
      var i_452985055 = 0;
      Label4: do {
          Label5: while (true) {
          if (!(i_452985055 < colontmp__452985054)) break Label5;
            i_939524498 = i_452985055;
            var Temporary6 = nimCopy(null, minSeq_939524476[i_939524498], NTI1107296259);
            result_939524447[0].push(Temporary6);;
            var Temporary7 = nimCopy(null, maxSeq_939524489[i_939524498], NTI1107296259);
            result_939524447[0].push(Temporary7);;
            i_452985055 += 1;
          }
      } while (false);
    } while (false);
    if (!(((minSeq_939524476).length == (maxSeq_939524489).length))) {
    add_939524556(result_939524447, 0, HEX5BHEX5D_939524536(maxSeq_939524489, HEX2EHEX2E_872416081((minSeq_939524476).length, ((maxSeq_939524489).length - 1))));
    }
    

  return result_939524447[0];

}

function map_939524593(s_939524596, op_939524598) {
  var result_939524599 = [];

    result_939524599 = new Array((s_939524596).length); for (var i = 0 ; i < (s_939524596).length ; ++i) { result_939524599[i] = []; }    Label1: do {
      var i_939524614 = 0;
      var colontmp__452985069 = 0;
      colontmp__452985069 = (s_939524596).length;
      var i_452985070 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_452985070 < colontmp__452985069)) break Label3;
            i_939524614 = i_452985070;
            result_939524599[i_939524614] = nimCopy(null, op_939524598(s_939524596[i_939524614]), NTI33554439);
            i_452985070 += 1;
          }
      } while (false);
    } while (false);

  return result_939524599;

}

function toString_1107296760(word_1107296761) {
  var result_1107296762 = [];

    result_1107296762 = nimCopy(null, word_1107296761.word, NTI33554439);

  return result_1107296762;

}

function owoify_939524106(source_939524107, level_939524108) {
    
function HEX3Aanonymous_939524188(w_939524189) {
      var result_939524190 = ({word: [], replacedWords: []});

        result_939524190 = nimCopy(result_939524190, initWord_1107296265(w_939524189), NTI1107296259);

      return result_939524190;

    }
    
function HEX3Aanonymous_939524224(w_939524225) {
      var result_939524226 = ({word: [], replacedWords: []});

        result_939524226 = nimCopy(result_939524226, initWord_1107296265(w_939524225), NTI1107296259);

      return result_939524226;

    }
    
function HEX3Aanonymous_939524589(w_939524590) {
      var result_939524591 = [];

        result_939524591 = nimCopy(null, toString_1107296760(w_939524590), NTI33554439);

      return result_939524591;

    }

  var result_939524109 = [];

  BeforeRet: do {
    Label1: do {
      var HEX3Atmp_939524129 = toJSStr(source_939524107).match(WORD_REGEX_939524104) || [];
      var iHEX60gensym3_939524132 = 0;
      var resultHEX60gensym3_939524139 = newSeq_419430869((HEX3Atmp_939524129).length);
      Label2: do {
        var it_939524143 = null;
        var i_452984936 = 0;
        var L_452984937 = (HEX3Atmp_939524129).length;
        Label3: do {
            Label4: while (true) {
            if (!(i_452984936 < L_452984937)) break Label4;
              it_939524143 = HEX3Atmp_939524129[i_452984936];
              resultHEX60gensym3_939524139[iHEX60gensym3_939524132] = nimCopy(null, cstrToNimstr(it_939524143), NTI33554439);
              iHEX60gensym3_939524132 += 1;
              i_452984936 += 1;
            }
        } while (false);
      } while (false);
    } while (false);
    var wordMatches_939524148 = nimCopy(null, resultHEX60gensym3_939524139, NTI419430695);
    Label5: do {
      var HEX3Atmp_939524168 = toJSStr(source_939524107).match(SPACE_REGEX_939524105) || [];
      var iHEX60gensym7_939524171 = 0;
      var resultHEX60gensym7_939524178 = newSeq_419430869((HEX3Atmp_939524168).length);
      Label6: do {
        var it_939524182 = null;
        var i_452984941 = 0;
        var L_452984942 = (HEX3Atmp_939524168).length;
        Label7: do {
            Label8: while (true) {
            if (!(i_452984941 < L_452984942)) break Label8;
              it_939524182 = HEX3Atmp_939524168[i_452984941];
              resultHEX60gensym7_939524178[iHEX60gensym7_939524171] = nimCopy(null, cstrToNimstr(it_939524182), NTI33554439);
              iHEX60gensym7_939524171 += 1;
              i_452984941 += 1;
            }
        } while (false);
      } while (false);
    } while (false);
    var spaceMatches_939524187 = nimCopy(null, resultHEX60gensym7_939524178, NTI419430695);
    var words_939524223 = map_939524192(wordMatches_939524148, HEX3Aanonymous_939524188);
    var spaces_939524234 = map_939524192(spaceMatches_939524187, HEX3Aanonymous_939524224);
    var actualLevel_939524235 = nuctoLowerStr(level_939524108);
    Label9: do {
      var op_939524270 = null;
      var i_452984946 = 0;
      Label10: do {
          Label11: while (true) {
          if (!true) break Label11;
            op_939524270 = SPECIFIC_WORD_MAPPING_LIST_989855746[i_452984946];
            apply_939524272(words_939524223, op_939524270);
            if ((11 <= i_452984946)) {
            break Label10;
            }
            
            i_452984946 += 1;
          }
      } while (false);
    } while (false);
    switch (toJSStr(actualLevel_939524235)) {
    case "owo":
      Label12: do {
        var op_939524320 = null;
        var i_452984950 = 0;
        Label13: do {
            Label14: while (true) {
            if (!true) break Label14;
              op_939524320 = OWO_MAPPING_LIST_989855749[i_452984950];
              apply_939524272(words_939524223, op_939524320);
              if ((14 <= i_452984950)) {
              break Label13;
              }
              
              i_452984950 += 1;
            }
        } while (false);
      } while (false);
      break;
    case "uwu":
      Label15: do {
        var op_939524361 = null;
        var i_452984954 = 0;
        Label16: do {
            Label17: while (true) {
            if (!true) break Label17;
              op_939524361 = UWU_MAPPING_LIST_989855748[i_452984954];
              apply_939524272(words_939524223, op_939524361);
              if ((7 <= i_452984954)) {
              break Label16;
              }
              
              i_452984954 += 1;
            }
        } while (false);
      } while (false);
      Label18: do {
        var op_939524372 = null;
        var i_452984957 = 0;
        Label19: do {
            Label20: while (true) {
            if (!true) break Label20;
              op_939524372 = OWO_MAPPING_LIST_989855749[i_452984957];
              apply_939524272(words_939524223, op_939524372);
              if ((14 <= i_452984957)) {
              break Label19;
              }
              
              i_452984957 += 1;
            }
        } while (false);
      } while (false);
      break;
    case "uvu":
      Label21: do {
        var op_939524413 = null;
        var i_452984961 = 0;
        Label22: do {
            Label23: while (true) {
            if (!true) break Label23;
              op_939524413 = UVU_MAPPING_LIST_989855747[i_452984961];
              apply_939524272(words_939524223, op_939524413);
              if ((4 <= i_452984961)) {
              break Label22;
              }
              
              i_452984961 += 1;
            }
        } while (false);
      } while (false);
      Label24: do {
        var op_939524424 = null;
        var i_452984964 = 0;
        Label25: do {
            Label26: while (true) {
            if (!true) break Label26;
              op_939524424 = UWU_MAPPING_LIST_989855748[i_452984964];
              apply_939524272(words_939524223, op_939524424);
              if ((7 <= i_452984964)) {
              break Label25;
              }
              
              i_452984964 += 1;
            }
        } while (false);
      } while (false);
      Label27: do {
        var op_939524435 = null;
        var i_452984967 = 0;
        Label28: do {
            Label29: while (true) {
            if (!true) break Label29;
              op_939524435 = OWO_MAPPING_LIST_989855749[i_452984967];
              apply_939524272(words_939524223, op_939524435);
              if ((14 <= i_452984967)) {
              break Label28;
              }
              
              i_452984967 += 1;
            }
        } while (false);
      } while (false);
      break;
    default: 
      raiseException({message: makeNimstrLit("The specified owoness level is not supported."), parent: null, m_type: NTI33555112, name: null, trace: [], up: null}, "Exception");
      break;
    }
    var res_939524588 = interleaveArrays_939524443(words_939524223, spaces_939524234);
    result_939524109 = nimCopy(null, nsuJoinSep(map_939524593(res_939524588, HEX3Aanonymous_939524589), []), NTI33554439);
    break BeforeRet;
  } while (false);

  return result_939524109;

}

function main_452984850(__452984851) {
    Label1: do {
      var element_452984871 = null;
      var colontmp__452984918 = [];
      colontmp__452984918 = document.querySelectorAll(toJSStr(nsuJoinSep(classes_452984836, makeNimstrLit(", "))));
      var i_452984920 = 0;
      var L_452984921 = (colontmp__452984918).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_452984920 < L_452984921)) break Label3;
            element_452984871 = colontmp__452984918[i_452984920];
            if (!((element_452984871.innerText == ""))) {
            element_452984871.innerText = toJSStr(owoify_939524106(cstrToNimstr(element_452984871.innerText), makeNimstrLit("owo")));
            }
            
            i_452984920 += 1;
          }
      } while (false);
    } while (false);

  
}
window.addEventListener("load", main_452984850, false);
window.addEventListener("onclick", main_452984850, false);
